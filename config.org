:DOC-CONFIG:
#+PROPERTY: header-args: emacs-lisp :tangle config.el
#+PROPERTY: header-args :mkdirp yes :comments no :tangle yes :results silent
#+STARTUP: overview
:END:
#+TITLE: Marty's Doom Emacs Configuration
#+AUTHOR: Marty Buchaus
#+EMAIL: marty@dabuke.com

* Table
+ [[Header and General]]
+ [[Spelling]]
+ [[Fly check]]
+ [[User Interface]]
+ [[Key Binding]]
+ [[Org]]
+ [[Functions]]
+ [[Other Tools]]
* Documentation Links
** Dired
-  [[https://doomemacs.discourse.group/t/dired-keybind-reference-sheet/127?u=mbuchaus][Doom Discourse dired keymap]],

* Header and General
Base Global configuration options and settings

 #+BEGIN_SRC emacs-lisp

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programming source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

(setq user-full-name "Marty Buchaus"
      user-mail-address "marty@dabuke.com")

(setq-default delete-by-moving-to-trash t)         ; Move to Trash
(setq-default create-lockfiles nil)                ; NO Lockfiles
(setq-default tab-width 4)                         ; Set width for tabs
(setq-default uniquify-buffer-name-style 'forward) ; Uniquify buffer names
(setq-default window-combination-resize t)         ; take new window space from all other windows (not just current)
(setq-default x-stretch-cursor t)                  ; Stretch cursor to the glyph width

(setq undo-limit 80000000)                ; Raise undo-limit to 80Mb
(setq evil-want-fine-undo t)              ; By default while in insert all changes are one big blob. Be more granular
(setq auto-save-default t)                ; Nobody likes to loose work, I certainly don't
(setq inhibit-compacting-font-caches t)   ; When there are lots of glyphs, keep them in memory
(setq truncate-string-ellipsis "…")       ; Unicode ellipsis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                 ; Replace selection when inserting text
(display-time-mode 1)                     ; Enable time in the mode-line
(global-subword-mode 1)                   ; Iterate through CamelCase words

(add-to-list 'load-path "~/.config/doom/elisp")

(add-hook 'doom-init-ui-hook #'spacemacs/home)
(remove-hook 'org-load-hook #'+org-init-keybinds-h)
#+END_SRC
* Spelling

Useing the spell-fu of doom with aspell.

#+BEGIN_SRC emacs-lisp

(setq ispell-dictionary "en_US")
(setq ispell-personal-dictionary (expand-file-name ".ispell_personal" doom-private-dir))

#+END_SRC
* Fly check
Get me some checking
#+BEGIN_SRC emacs-lisp

(setq flycheck-global-modes '(not org-mode))

#+END_SRC

* User Interface
** AVY
#+BEGIN_SRC emacs-lisp
(after! avy
  ;; home row priorities: 8 6 4 5 - - 1 2 3 7
  (setq avy-keys '(?n ?e ?i ?s ?t ?r ?i ?a)))
#+END_SRC

** Company
*** Misc

#+BEGIN_SRC emacs-lisp

(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying


(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+END_SRC

*** Plain Text
#+BEGIN_SRC emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+END_SRC

** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "DejaVu Sans Mono" :size 10.5 )
      doom-unicode-font (font-spec :family "Symbola" :size 12)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "DejaVu Sans Mono" :size 20))

(custom-set-faces!
  '(mode-line :family "DejaVu Sans Mono" :height 105)
  '(mode-line-inactive :family "DejaVu Sans Mono" :height 105))
#+end_src

Mixed Pitch Font setting

#+BEGIN_SRC emacs-lisp

(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(after! mixed-pitch
  (defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)
  (setq mixed-pitch-set-height t)
  (setq variable-pitch-serif-font (font-spec :family "Ubuntu" :size 27))
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))

(set-char-table-range composition-function-table ?f '(["\\(?:ff?[fijlt]\\)" 0 font-shape-gstring]))
(set-char-table-range composition-function-table ?T '(["\\(?:Th\\)" 0 font-shape-gstring]))
#+END_SRC

** IVY
#+BEGIN_SRC emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
(setq ivy-sort-max-size 50000)
(setq +ivy-buffer-preview t)
#+END_SRC

** Line Number

I like the Relative Line Numbering

#+BEGIN_SRC emacs-lisp

(setq-default linum-format "%4d \u2502")
(setq-default linum-relative-format "%4s \u2502")
(setq display-line-numbers-type nil)

#+END_SRC

** Mode line
#+BEGIN_SRC emacs-lisp

(setq doom-modeline-height 30)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-github t)
(setq doom-modeline-persp-name t)

#+END_SRC

** Theme

And then from =config.el= we specify the theme to use.

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

** Tree macs
#+BEGIN_SRC emacs-lisp

(use-package! treemacs
  :init
  (setq +treemacs-git-mode 'deferred))

#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-secondary-delay 0.5)
(setq which-key-allow-multiple-replacements t)

(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+END_SRC

* Key Binding

I have adapted to the Spacemacs method of Key Binding. yet I see much More traction on the Doom repos.
#+BEGIN_SRC emacs-lisp


(global-set-key (kbd "C-:") '+spell/correct)
(global-set-key (kbd "C-<") '+spell/next-error)


;; (setq doom-leader-key "SPC"
;;       doom-localleader-key ",")

;; (define-key input-decode-map [(control ?i)] [control-i])
;; (define-key input-decode-map [(control ?I)] [(shift control-i)])
;; (map! :map 'evil-motion-state-map "C-i" nil)
;; (define-key evil-motion-state-map [control-i] 'evil-jump-forward)

;; (map! (:after help :map helpful-mode-map
;;        :n "h"      #'helpful-at-point))

;; (map! :leader
;;       :desc "List bookmarks"                          "b L" #'list-bookmarks
;;       :desc "Save current bookmarks to bookmark file" "b w" #'bookmark-save
;;       :desc "M-x"                                     "SPC" #'counsel-M-x

;;       ;;; <leader> a --- Application
;;       ;;;
;;       (:prefix ("a" . "application")
;;        (:prefix ("d" . "dired")
;;         "-"  #'dired)
;;        (:prefix ("o" . "org")
;;         "a"  #'org-agenda
;;         (:prefix ("r" . "roam")
;;          (:prefix ("d" . "dailies")
;;           "t"  #'org-roam-dailies-find-today)))
;;        :desc "Pass" "p" #'ivy-pass)

;;       ;;; <leader> g --- git
;;       (:prefix ("g" . "magit")
;;        "s" #'magit-status)

;;       ;;; <leader> h --- help
;;       (:prefix ("h")
;;        "h" #'helpful-at-point)

;;       ;;; <leader> l --- layout/workspace
;;       (:when (featurep! :ui workspaces)
;;        (:prefix ("l" . "workspace")
;;         :desc "Display tab bar"           "l"   #'+workspace/display
;;         :desc "Switch workspace"          "."   #'+workspace/switch-to
;;         :desc "Switch to last workspace"  "`"   #'+workspace/other
;;         :desc "New workspace"             "n"   #'+workspace/new
;;         :desc "Load workspace from file"  "L"   #'+workspace/load
;;         :desc "Save workspace to file"    "s"   #'+workspace/save
;;         :desc "Delete session"            "x"   #'+workspace/kill-session
;;         :desc "Delete this workspace"     "d"   #'+workspace/delete
;;         :desc "Rename workspace"          "r"   #'+workspace/rename
;;         :desc "Restore last session"      "R"   #'+workspace/restore-last-session
;;         :desc "Next workspace"            "l"   #'+workspace/switch-right
;;         :desc "Previous workspace"        "h"   #'+workspace/switch-left
;;         :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
;;         :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
;;         :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
;;         :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
;;         :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
;;         :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
;;         :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
;;         :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
;;         :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
;;         :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))

;;       ;;; <leader> n --- Notes
;;       (:prefix ("n")
;;        :desc "roam daily capture" "j" #'org-roam-dailies-capture-today)


;;       ;;; <leader> o --- Open
;;       (:prefix-map ("o" . "open")
;;        (:prefix-map ("m" . "my-files")
;;         :desc "0 Mobile"   "0" #'(lambda () (interactive) (find-file "~/Nextcloud/Notes/org/0mobile.org"))
;;         :desc "Contacts"   "c" #'(lambda () (interactive) (find-file "~/Nextcloud/Notes/org/contacts.org"))
;;         :desc "Tasks"      "g" #'(lambda () (interactive) (find-file "~/Nextcloud/Notes/org/Tasks.org"))
;;         :desc "Someday"    "s" #'(lambda () (interactive) (find-file "~/Nextcloud/Notes/org/Someday.org"))
;;         :desc "Read Later" "R" #'(lambda () (interactive) (find-file "~/Nextcloud/Notes/org/read-later.org"))
;;         :desc "Habits"     "h" #'(lambda () (interactive) (find-file "~/Nextcloud/Notes/org/Habits.org"))))

;;       ;;; <leader> p --- Projectile
;;       (:prefix ("p")
;;        :desc "dired in project"  "-"  #'projectile-dired)

;;       ;;; <leader> S --- Spelling
;;       (:prefix-map ("S" . "spelling")
;;        :desc "Correct here"  "c"  #'+spell/correct
;;        :desc "add word"      "a"  #'+spell/add-word
;;        :desc "next error"    "n"  #'+spell/next-error
;;        :desc "prev error"    "p"  #'+spell/previous-error
;;        :desc "remove word"   "d"  #'+spell/remove-word))
  #+END_SRC

* Org
** Base
Set the Directories base.

#+BEGIN_SRC emacs-lisp
;;; Org-mode Start

(setq org-directory "~/Nextcloud/Notes/org")
(setq org-roam-directory "~/Nextcloud/Notes/org")

#+END_SRC

** Org Look
#+BEGIN_SRC emacs-lisp
(after! org

;;;; Faces

  (setq org-todo-keyword-faces
        '(("TODO"       . org-warning)
          ("NEXT"       . (:foreground "#008080" :weight bold))
          ("STARTED"    . (:foreground "#E35DBF" :weight bold))
          ("BLOCKED"    . (:foreground "White"   :weight bold))
          ("TODELEGATE" . (:foreground "White"   :weight bold))
          ("DELEGATED"  . (:foreground "pink"    :weight bold))
          ("CANCELED"   . (:foreground "white"   :weight bold))
          ("TICKLE"     . (:foreground "White"   :weight bold))
          ("DONE"       . (:foreground "green"   :weight bold))))

;;;; Symbols

  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                         ("#+END_SRC" . "†")
                                         ("#+begin_src" . "†")
                                         ("#+end_src" . "†")
                                         ("#+BEGIN_EXAMPLE" . ">EG>")
                                         ("#+begin_example" . ">EG>")
                                         ("#+END_EXAMPLE" . "<EG<")
                                         ("#+end_example" . "<EG<")
                                         ("[ ]" . "☐")
                                         ("[X]" . "☑")
                                         ("[-]" . "⊡")
                                         (">=" . "≥")
                                         ("=>" . "⇨")))

  (prettify-symbols-mode 1))

#+END_SRC


** Set misc
I want  indentation
#+BEGIN_SRC emacs-lisp
(after! org
  
  (setq org-catch-invisible-edits 'show-and-error)
  (setq org-clock-into-drawer "CLOCKING")          ;; Where to put the clock in and out for tracked items
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-cycle-separator-lines 0)               ;; show no blank lines between headings
  (setq org-src-tab-acts-natively t)               ;; Make source tabs act as they would in native major mode
  (setq org-icalendar-store-UID t)
  (setq org-id-track-globally t)
  (setq org-log-done t)
  (setq org-log-into-drawer t)
  (setq org-log-reschedule t)
  (setq org-contacts-files '("~/Nextcloud/Notes/org/contacts.org"))
  (setq org-want-todo-bindings t)
  (setq org-tags-column -80)

  (setq org-startup-indented t)
  (setq org-indent-indentation-per-level 2)
  (setq org-src-tab-acts-natively t)

  ;; make for a cleaner look of the buffer

  (setq org-hide-emphasis-markers t)
  (setq org-fontify-done-headline t)
  (setq org-hide-leading-stars t)
  (setq org-pretty-entities t)
  (setq org-fontify-done-headline t)
  (setq org-fontify-whole-heading-line t)
  (setq org-fontify-quote-and-verse-blocks t)

  ;;;; Attachemnt
  (setq org-attach-dir-relative t)
  (setq org-attach-preferred-new-method 'ask)
  (setq org-attach-use-inheritance t)

  ;;;; Habits
  
  (setq org-habit-graph-column 60)
  )
  #+END_SRC
** binding
#+BEGIN_SRC emacs-lisp
(after! org
  (map! :map org-mode-map
        :n "gj" #'org-forward-element
        :n "gk" #'org-backward-element
        :n "gh" #'org-up-element
        :n "gl" #'org-down-element
        :n "M-j" #'org-metadown
        :n "M-k" #'org-metaup))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
(after! org

  (setq org-agenda-files '("~/Nextcloud/Notes/org"
                           "~/Nextcloud/Notes/org/daily"
                           "~/.cache/calendar/google.org"
                           "~/.cache/calendar/rackspace.org"
                           "~/.cache/calendar/tatjana.org"))

  (setq org-agenda-compact-blocks t)
  (setq org-agenda-include-deadlines t)
  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-window-setup 'current-window)
  (setq org-deadline-warning-days 14)

  ;; Ignore scheduled tasks in task list
  (setq org-agenda-todo-ignore-scheduled 'all)
  (setq org-agenda-todo-ignore-deadlines 'far)
  ;; Skip Finished Items
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
  )
  #+END_SRC
** Appear
#+BEGIN_SRC emacs-lisp
(use-package! org-appear
  :after org)
#+END_SRC


** Roam
*** Company Org roam
#+BEGIN_SRC emacs-lisp

(require 'company-org-roam)
    (use-package! company-org-roam
      :when (featurep! :completion company)
      :after org-roam
      :config
      (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))

#+END_SRC
*** General

#+BEGIN_SRC emacs-lisp
(after! org-roam

  (setq org-roam-buffer-width 0.10)

  (setq org-roam-index-file "~/Nextcloud/Notes/org/index.org")
  (setq org-roam-db-location "~/Nextcloud/Notes/org-roam.db")

  (map! :after org
        :map org-mode-map
        :localleader
        :prefix ("m" . "org-roam")
        "b" #'org-roam-switch-to-buffer
        "f" #'org-roam-find-file
        "g" #'org-roam-graph
        "i" #'org-roam-insert
        "I" #'org-roam-insert-immediate
        "m" #'org-roam
        "t" #'org-roam-tag-add
        "T" #'org-roam-tag-delete
        (:prefix ("d" . "dailies")
         :desc "Find previous note" "p" #'org-roam-dailies-find-previous-note
         :desc "Find date"          "d" #'org-roam-dailies-find-date
         :desc "Find next note"     "n" #'org-roam-dailies-find-next-note
         :desc "Find tomorrow"      "m" #'org-roam-dailies-find-tomorrow
         :desc "Capture today"      "j" #'org-roam-dailies-capture-today
         :desc "Capture tomorrow"   "T" #'org-roam-dailies-capture-today
         :desc "Find today"         "t" #'org-roam-dailies-find-today
         :desc "Capture Date"       "v" #'org-roam-dailies-capture-date
         :desc "Find yesterday"     "y" #'org-roam-dailies-find-yesterday
         :desc "Find directory"     "." #'org-roam-dailies-find-directory)))

#+END_SRC

*** Face

#+BEGIN_SRC emacs-lisp
(after! org-roam
  (custom-set-faces '(org-roam-link ((t (:inherit org-link :foreground "#F2C3BD"))))))

#+END_SRC

*** Functions
**** Org-Roam Dailies
#+BEGIN_SRC emacs-lisp
(defun marty/org-roam-dailies-graphicslink ()
  " Set the Graphics Link to Today in the Pictures folder that maid pushes to."
  (interactive)
  (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 5 7)))
         (day   (string-to-number (substring (buffer-name) 8 10)))
         (datim (encode-time 0 0 0 day month year)))
    (format-time-string "[[/home/marty/Nextcloud/Pictures/2020 - 2029/%Y/%B/Daily/%d][Graphics Link]]" datim)))

(defun marty/org-roam-dailies-title()
  (interactive)
  (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 5 7)))
         (day   (string-to-number (substring (buffer-name) 8 10)))
         (datim (encode-time 0 0 0 day month year)))
    (format-time-string "%A, %B %d %Y" datim)))

#+END_SRC
  
*** Org Roam Capture Templates
#+BEGIN_SRC emacs-lisp

(after! org-roam
  (setq  org-roam-dailies-capture-templates
         '(
           ("d" "default" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "daily/%<%Y-%m-%d>"
            ;; :head "#+TITLE: Daily Notes for %<%A, %B %d %Y>"
            :unnarrowed t)
           ("t" "Tasks" entry
            #'org-roam-capture--get-point
            "* TODO  %?"
            :file-name "daily/%<%Y-%m-%d>"
            :olp ("Tasks"))
           ("r" "Rackspace" entry
            #'org-roam-capture--get-point
            "* %<%H:%M>  %?"
            :file-name "daily/%<%Y-%m-%d>"
            :olp ("Rackspace"))
           ("j" "Journal" entry
            #'org-roam-capture--get-point
            "* %<%H:%M>  %?"
            :file-name "daily/%<%Y-%m-%d>"
            :olp ("Journal")))))
#+END_SRC
            
*** Org Roam Server
#+BEGIN_SRC emacs-lisp

(use-package! org-roam-server
  :after org-roam
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-label-truncate t
        org-roam-server-label-truncate-length 60
        org-roam-server-label-wrap-length 20))

(defun org-roam-server-open ()
  "Ensure the server is active, then open the roam graph."
  (interactive)
  (org-roam-server-mode 1)
  (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port)))
#+END_SRC


** Capture Templates
#+BEGIN_SRC emacs-lisp

(after! org
  (setq org-capture-templates
        '(("t" "Task" entry
           (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
           (file "~/.config/doom/templates/todo.orgcaptmpl"))
          ("c" "Contacts" entry (file "~/Nextcloud/Notes/org/contacts.org")
           (file "~/.config/doom/templates/contact.orgcaptmpl"))
          ("p" "Protocol" entry
           (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
           (file "~/.config/doom/templates/org-templates/protocol-entry.orgcaptmpl"))
          ("L" "Protocol Link" entry
           (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
           (file "~/.config/doom/templates/org-templates/protocol-link.orgcaptmpl"))
          ("w" "Web site" entry
           (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
           (file "~/.config/doom/templates/org-templates/weblink.orgcaptmpl"))
          ("R" "Remember-mutt" entry
           (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Mail")
           (file "~/.config/doom/templates/org-templates/mail.orgcaptmpl"))
          ("s" "Simple" entry
           (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Popup")
           "%[~/.emacs.d/.org-popup]" :immediate-finish t :prepend t)

          ("m" "Email Workflow")
          ("mf" "Follow Up" entry (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Follow Up")
           "* TODO Follow up with %:fromname on %:subject\nSCHEDULED:%t\n%a\n\n%i")
          ("ma" "auto Follow Up" entry (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Follow Up")
           "* TODO Follow up with %:fromname on %:subject\n%a\n\n%i" :immediate-finish t)
          ("mF" "Follow Up With Deadline" entry (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Follow Up")
           "* TODO Follow up with %:fromname on %:subject\nSCHEDULED:%t\nDEADLINE:%(org-insert-time-stamp (org-read-date nil t "+2d"))\n%a\n\n%i")
          ("mr" "Read Later" entry (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Read Later")
           "* TODO Read  Later on %:subject\nSCHEDULED:%t\n%a\n\n%i":immediate-finish t)
          ("mm" "Masons Follow Up" entry (file+olp "~/Nextcloud/Notes/org/Masons.org" "Follow Up")
           "* TODO Follow up with %:fromname on %:subject %a\nSCHEDULED:%t\n\n%i")
          ("mR" "Workflow Rackspace")
          ("mRf" "Follow Up" entry (file+olp "~/Nextcloud/Notes/org/Rackspace.org" "Follow Up")
           "* TODO Follow up with %:fromname on %:subject\nSCHEDULED:%t\nDEADLINE:%(org-insert-time-stamp (org-read-date nil t "+2d"))\n%a\n\n%i")
          ("mRr" "Read Later" entry (file+olp "~/Nextcloud/Notes/org/Rackspace.org" "Read Later")
           "* TODO Read  Later with %:fromname on %:subject\nSCHEDULED:%t\n%a\n\n%i" :immediate-finish t)
          ))
  (setq org-protocol-default-template-key "t")
  )
  #+END_SRC
** LSP support in SRC blocks
#+BEGIN_SRC emacs-lisp

(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("go" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))

#+END_SRC

** Org-Modules
#+BEGIN_SRC emacs-lisp

(after! org
  (setq org-modules
        (append org-modules
                '(org-compat
                  org-contacts
                  org-habit
                  org-id
                  org-notify
                  org-protocol
                  org-tempo)))
  )

  #+END_SRC
** Refile

From:  https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/

This config lets org-refile searches all the opened org mode files and fetches
all the headings in them.

#+BEGIN_SRC emacs-lisp
;; REFILE
(after! org

  (setq all-org-files-main (file-expand-wildcards (concat org-directory "/*.org")))

  (defun +org/opened-buffer-files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))

  (defun org/build-refile-cache ()
    "interactively update the refile cache"
    (interactive)
    (org-refile-cache-clear)
    (org-refile-get-targets))

  (defun +org-search ()
    (interactive)
    (org-refile '(4)))

  (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 3)
                             (nil :maxlevel . 2)))
  (setq org-refile-use-cache t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 'full-file-path)                  ; Show full paths for refiling
  (setq org-log-refile t)

  (run-with-idle-timer 300 t (lambda ()
                               (org-refile-cache-clear)
                               (org-refile-get-targets))))

#+END_SRC
** Org Mode Hook
#+BEGIN_SRC emacs-lisp

(add-hook! org-mode :append
           #'visual-line-mode
           #'mixed-pitch-mode
           #'yas-minor-mode-on
           #'org-appear-mode)


(add-hook! 'after-init-hook 'org-roam-mode)

(after! org
  (defun add-html-file (arg)
    (with-temp-buffer
      (insert-file-contents arg)
      (buffer-string))))

#+END_SRC

** Publish

;; Proprietary Stuff for work
#+BEGIN_SRC emacs-lisp

(defun marty/publish (a b c)
  (setq org-export-with-toc t)
  (org-html-publish-to-html a b c)
  (setq org-export-with-toc nil)
  (org-ascii-publish-to-ascii a b c))

(after! org
  (setq org-publish-project-alist
        '(
          ("NSI-Documentation-content"
           :base-directory "~/Source/NSI/NSI-Documentation/"
           :base-extension "org"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs"
           :publishing-function marty/publish
           :exclude "Archive"
           :section-numbers nil
           :with-toc nil
           :auto-sitemap t
           :sitemap-filename "filemap.org"
           :sitemap-title "& Sitemap"
           :headline-levels 10
           :auto-preamble t
           :recursive t)

          ("NSI-Documentation-images"
           :base-directory "~/Source/NSI/NSI-Documentation/images/"
           :base-extension "jpg\|gif\|png"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs/images/"
           :publishing-function org-publish-attachment
           :recursive t)

          ("NSI-Documentation-TVA-ScanReports-2020-images"
           :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2020/images/"
           :base-extension "jpg\|gif\|png"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2020/images/"
           :publishing-function org-publish-attachment
           :recursive t)

          ("NSI-Documentation-TVA-ScanReports-2020-reports"
           :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2020/reports/"
           :base-extension "ods\|csv\|xls\|xslt\|pdf"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2020/reports/"
           :publishing-function org-publish-attachment
           :recursive t)

          ("NSI-Documentation-TVA-ScanReports-2021-images"
           :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2021/images/"
           :base-extension "jpg\|gif\|png"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2021/images/"
           :publishing-function org-publish-attachment
           :recursive t)

          ("NSI-Documentation-TVA-ScanReports-2021-reports"
           :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2021/reports/"
           :base-extension "ods\|csv\|xls\|xslt\|pdf"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2021/reports/"
           :publishing-function org-publish-attachment
           :recursive t)

          ("NSI-Documentation-TVA-ScanReports-files"
           :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/files/"
           :base-extension "ods\|csv\|xls\|xslt\|pdf"
           :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/files/"
           :publishing-function org-publish-attachment
           :recursive t)

          ("salt-master"
           :base-directory "~/Source/NSI/salt-master/"
           :base-extension "org"
           :publishing-directory "~/Source/NSI/salt-master/docs"
           :publishing-function marty/publish
           :exclude "docs"
           :section-numbers nil
           :with-toc nil
           :auto-sitemap t
           :sitemap-filename "filemap.org"
           :sitemap-title "& Sitemap"
           :headline-levels 7
           :auto-preamble t
           :recursive t)

          ("NSI-Documentation" :components ("NSI-Documentation-content" "NSI-Documentation-images" "NSI-Documentation-TVA-ScanReports-2020-images" "NSI-Documentation-TVA-ScanReports-2020-reports" "NSI-Documentation-TVA-ScanReports-2021-images" "NSI-Documentation-TVA-ScanReports-2021-reports" "NSI-Documentation-TVA-ScanReports-files"))))

  )
  #+END_SRC
** Tags Keywords
#+BEGIN_SRC emacs-lisp
(after! org
;;;; Tag list
  (setq org-tag-alist (quote
                       ((:startgroup)
                        ("@ASITS"     . ?A)
                        ("@BillPay"   . ?B)
                        ("@RedEarth"  . ?D)
                        ("@Email"     . ?E)
                        ("@Jazney"    . ?J)
                        ("@Outside"   . ?o)
                        ("@PhoneCall" . ?p)
                        ("@Personal"  . ?P)
                        ("@Rackspace" . ?R)
                        ("@Reading"   . ?r)
                        ("@errand"    . ?e)
                        ("@home"      . ?h)
                        ("@inside"    . ?i)
                        ("@masons"    . ?M)
                        ("@music"     . ?m)
                        ("@office"    . ?O)
                        ("@system"    . ?x)
                        ("2637E20th")
                        (:endgroup)
                        ("CANCELLED"  . ?C)
                        ("DRAFT"      . ?D)
                        ("FLAGGED"    . ?F)
                        ("HOLD"       . ?H)
                        ("IDEA"       . ?I)
                        ("NOTE"       . ?N)
                        ("PROJECT"    . ?P)
                        ("WAITING"    . ?w)
                        ("WORK"       . ?W))))

 ;;;; keywords 
  
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "NEXT(n!)"
                    "STARTED(s!)"
                    "BLOCKED(b@/!)"
                    "TODELEGATE(g@/!)"
                    "DELEGATED(D@/!)"
                    "FOLLOWUP(f@/!)"
                    "TICKLE(T!)"
                    "|"
                    "CANCELLED(c@)"
                    "DONE(d@)")))
  )
  #+END_SRC

** TSfile Links

TS files memacs method of finding files in my file cabinet
https://karl-voit.at/2017/01/01/memacs-grep/

#+BEGIN_SRC emacs-lisp

(after! org

  (defvar memacs-root "~/Nextcloud/Notes/memacs/")
  (defvar memacs-file-pattern "files.org")

  ;; by John Kitchin

  (defun my-handle-tsfile-link (querystring)
    ;; get a list of hits
    (let ((queryresults (split-string
                         (s-trim
                          (shell-command-to-string
                           (concat
                            "grep \""
                            querystring
                            "\" "
                            (concat memacs-root memacs-file-pattern))))
                         "\n" t)))
      ;; check length of list (number of lines)
      (cond
       ((= 0 (length queryresults))
        ;; edge case: empty query result
        (message "Sorry, no results found for query: %s" querystring))
       (t
        (with-temp-buffer
          (insert (if (= 1 (length queryresults))
                      (car queryresults)
                    (completing-read "Choose: " queryresults)))
          (org-mode)
          (goto-char (point-min))
          (org-next-link)
          (org-open-at-point "file:"))))))

  ;; Set org-protocol file handler
  (org-link-set-parameters
   "tsfile"
   :follow (lambda (path) (my-handle-tsfile-link path))
   :help-echo "Opens the linked file with your default application")


  (defun marty/dired-copy-filename-as-tsfile-link ()
    "Copy current file name with its basename as [[tsfile:<basename>]] custom org-mode link."
    (interactive)
    (dired-copy-filename-as-kill) ;; current file name to kill ring
    (let* ((filename (current-kill 0))) ;; get topmost kill ring element
      (kill-new (concat "[[tsfile:" filename "]]")) ;; write back new/modified kill ring element
      )
    )
  )



  #+END_SRC




** ORG-Functions
#+BEGIN_SRC emacs-lisp
(after! org
;;;; Export Directory

  (defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
    (unless pub-dir
      (setq pub-dir "exported-org-files")
      (unless (file-directory-p pub-dir)
        (make-directory pub-dir)))
    (apply orig-fun extension subtreep pub-dir nil))

  (advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)


;;;; Open Mutt Message

  (defun mutt-open-message (message-id)
    "In neomutt, open the email with the the given Message-ID"
    (let*
        ((message-id
          (replace-regexp-in-string "^/*" "" message-id))
         (mail-file
          (replace-regexp-in-string
           "\n$" "" (shell-command-to-string
                     (format "mu find -u i:%s --fields 'm'" message-id ))))
         (mutt-keystrokes
          (format "macro index - l~i%s; push -\\nb\\n" (shell-quote-argument message-id)))
         (mutt-command (format "neomutt -f '=%s' -e '%s'" mail-file  mutt-keystrokes)))

      (message "Launching neomutt for message %s" message-id)
      ;; (message "id %s\n file %s\n  mutt-key %s\n Command %s\n" message-id mail-file mutt-keystrokes mutt-command)
      ;;#  neomutt -f "=Dabuke/INBOX" -e "macro index - 'l~i0.0.F.CAA.1D672FE8EFCB566.0@suitepmta020090.emarsys.us'; push -\n"
      (call-process "setsid" nil nil nil
                    "-f" "termite" "-e"
                    mutt-command)
      ))

  (org-add-link-type "message" 'mutt-open-message)

;;;; Auto Tangle

  (defun mb/org-babel-tangle-async (file)
    "Invoke `org-babel-tangle-file' asynchronously."
    (message "Tangling %s..." (buffer-file-name))
    (async-start
     (let ((args (list file)))
       `(lambda ()
          (require 'org)
          ;;(load "~/.emacs.d/init.el")
          (let ((start-time (current-time)))
            (apply #'org-babel-tangle-file ',args)
            (format "%.2f" (float-time (time-since start-time))))))
     (let ((message-string (format "Tangling %S completed after " file)))
       `(lambda (tangle-time)
          (message (concat ,message-string
                           (format "%s seconds" tangle-time)))))))

  (defun mb/org-babel-tangle-current-buffer-async ()
    "Tangle current buffer asynchronously."
    (mb/org-babel-tangle-async (buffer-file-name)))

  )
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp

(after! dired
  (map! :map dired-mode-map
        :n "C-t s" #'marty/dired-copy-filename-as-tsfile-link))
#+END_SRC

* MU4E
** Config
#+BEGIN_SRC emacs-lisp
(setq mu4e-installation-path "/usr/share/emacs/site-lisp")
(setq doom-modeline-mu4e t)

(after! mu4e
;;;;; (config)

  (setq mail-user-agent 'mu4e-user-agent)
  (setq message-kill-buffer-on-exit t)
  (setq mu4e-attachment-dir "/home/marty/Downloads/Mail")
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-index-update-in-background t)
  (setq mu4e-index-lazy-check t)
  (setq mu4e-index-cleanup t)
  ;; (setq mu4e-use-fancy-chars t)

;;;;;; Set from Context  these are default

  (setq mu4e-drafts-folder nil)                      ;; set from context
  (setq mu4e-get-mail-command nil)                   ;; set from context
  (setq mu4e-sent-folder nil)                        ;; set from context
  (setq mu4e-trash-folder nil)                       ;; set from context

;;;;;; PGP

  (setq mml-secure-openpgp-sign-with-sender t)
  (setq mml-secure-openpgp-encrypt-to-self t)

;;;;; Send Mail

  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq message-sendmail-extra-arguments '("--read-envelope-from"))
  (setq sendmail-program "/usr/bin/msmtp")
  (setq mu4e-sent-messages-behavior 'sent)

;;;;; VIEW Email

  (setq mu4e-html2text-command 'mu4e-shr2text)

  (setq mu4e-view-auto-mark-as-read t)
  (setq mu4e-view-image-max-width 800)
  (setq mu4e-view-show-addresses t)
  (setq mu4e-view-show-images t)

  )
#+END_SRC

** Compose
#+BEGIN_SRC emacs-lisp

;;;;; Compose

  (setq mu4e-compose-dont-reply-to-self t)
  (setq mu4e-compose-format-flowed t)
  (setq mu4e-compose-signature nil)        ;; Pulled from Context

;;;;;; compose mode hook

  (add-hook 'mu4e-compose-mode-hook
            '(lambda ()
               "My Setting for Composing Messages"
               (save-excursion (message-add-header "X-Mailer: mu4e/Linux"))
               (save-excursion (message-add-header "X-PGP-KEY-Fingerprint: 7F6C A60C 06C2 4811 FA1C A2BC 2EBC 5E32 FEE3 0AD4"))
               (save-excursion (message-add-header "X-PGP-Key-ID: 0x090F6CEA"))
               (save-excursion (message-add-header "X-PGP-Key: https://keybase.io/mbuchaus/key.asc "))
               (marty-mu4e/mu4e-compose-maybe-signed-and-crypted)
               (flyspell-mode)
               (set-fill-column 72)
               (turn-on-auto-fill)))

#+END_SRC

** Headers
#+BEGIN_SRC emacs-lisp
(after! mu4e

  (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
  (setq mu4e-headers-include-related t)

  (add-to-list 'mu4e-header-info-custom
               '(:full-mailing-list .
                                    ( :name "Mailing-list"                     ;; long name, as seen in the message-view
                                            :shortname "Mail List"                    ;; short name, as seen in the headers view
                                            :help "Full name for mailing list" ;; tooltip
                                            :function (lambda (msg)
                                                        (or (mu4e-message-field msg :mailing-list) "")))))

  (add-to-list 'mu4e-header-info-custom
               '(:xlabel .
                         ( :name "X-Label or Tag"                 ;; long name, as seen in the message-view
                                 :shortname "X-Label"        ;; short name, as seen in the headers view
                                 :help "Maildir X-Label"   ;; tooltip
                                 :function (lambda (msg)
                                             (or (mu4e-message-field msg :X-Label) "")))))
  (setq mu4e-headers-fields '(
                              (:human-date . 18)    ;; alternatively, use :human-date
                              (:flags . 7)
                              (:from-or-to . 40)
                              (:full-mailing-list . 30)
                              (:tags . 10)           ;;  X-label
                              (:size . 10)
                              (:thread-subject)))    ;;  :subject or thread-subject

  (setq mu4e-view-fields '(:date
                           :from
                           :to
                           :cc
                           :bcc
                           :subject
                           :flags
                           :maildir
                           :full-mailing-list
                           :size
                           :signature
                           :xlabel
                           :tags
                           :decryption
                           :attachments))

  (setq mu4e-compose-hidden-headers '("^Face:"
                                      "^X-Face:"
                                      "^Openpgp:"
                                      "^X-Draft-From:"
                                      "^X-Mailer:"
                                      "^User-agent:"))

  (setq mu4e-bookmarks
        '(
          (:name "All Inboxes"
           :query "maildir:/Dabuke/INBOX OR maildir:/Gmail/INBOX OR maildir:/Rackspace/INBOX OR maildir:/RHH/INBOX"
           :key ?i)
          (:name "Unread messages"
           :query "flag:unread AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
           :key ?u)
          (:name "Unread Dabuke"
           :query "flag:unread AND NOT flag:trashed AND maildir:/Dabuke/"
           :key ?d)
          (:name "Today's messages"
           :query "date:today..now AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
           :key ?t)
          (:name "Yesterday and today messages"
           :query "date:1d..now AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
           :key ?y)
          (:name "Yesterday messages"
           :query "date:..1d AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
           :key ?Y)
          (:name "Last 7 days"
           :query "date:7d..now AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
           :key ?w)
          (:name "Messages with images"
           :query "mime:image/* AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
           :key ?p)
          ))

  (defvar +mu4e-header--folder-colors nil)

  (appendq! mu4e-header-info-custom
            '((:folder .
               (:name "Folder" :shortname "Folder" :help "Lowest level folder" :function
                (lambda (msg)
                  (+mu4e-colorize-str
                   (replace-regexp-in-string "\\`.*/" "" (mu4e-message-field msg :maildir))
                   '+mu4e-header--folder-colors)))))))
#+END_SRC

** Context
#+BEGIN_SRC emacs-lisp
(after! mu4e
;;;;; Contexts

  (setq mu4e-compose-context-policy 'ask-if-none)
  (setq mu4e-context-policy 'ask-if-none)
  (setq mu4e-contexts
        `(
;;;;;; Dabuke
          ,(make-mu4e-context
            :name "Dabuke"
            :enter-func (lambda () (mu4e-message "Switch to the Dabuke context"))
            :leave-func (lambda () (mu4e-message "Leaving Dabuke context"))
            :vars '((user-mail-address      . "marty@dabuke.com")
                    ;; (mu4e-get-mail-command  . "mbsync Dabuke")
                    (mu4e-refile-folder     . "/Dabuke/Archive")
                    (mu4e-trash-folder      . "/Dabuke/Trash")
                    (mu4e-drafts-folder     . "/Dabuke/Drafts")
                    (mu4e-sent-folder       . "/Dabuke/Sent")
                    (user-full-name         . "Marty Buchaus")
                    (mu4e-maildir-shortcuts . ((:maildir "/Dabuke/Archive"              :key ?a)
                                               (:maildir "/Dabuke/Drafts"               :key ?d)
                                               (:maildir "/Dabuke/INBOX"                :key ?i)
                                               (:maildir "/Dabuke/Junk"                 :key ?j)
                                               (:maildir "/Dabuke/Lists.Emacs"          :key ?e)
                                               (:maildir "/Dabuke/Lists.Fail2Ban"       :key ?f)
                                               (:maildir "/Dabuke/Lists.IFTTT"          :key ?I)
                                               (:maildir "/Dabuke/Lists.Jazney"         :key ?J)
                                               (:maildir "/Dabuke/Lists.Linode"         :key ?L)
                                               (:maildir "/Dabuke/Lists.Mutt"           :key ?M)
                                               (:maildir "/Dabuke/Lists.PHP"            :key ?P)
                                               (:maildir "/Dabuke/Lists.Postmaster"     :key ?p)
                                               (:maildir "/Dabuke/Lists.Root"           :key ?r)
                                               (:maildir "/Dabuke/Lists.Spacemacs"      :key ?m)
                                               (:maildir "/Dabuke/Lists.nextcloud"      :key ?N)
                                               (:maildir "/Dabuke/Lists.ofmasons"       :key ?O)
                                               (:maildir "/Dabuke/Lists.org2blog"       :key ?2)
                                               (:maildir "/Dabuke/Lists.orgmode"        :key ?g)
                                               (:maildir "/Dabuke/Lists.passwordstore"  :key ?W)
                                               (:maildir "/Dabuke/Lists.qutebrowser"    :key ?q)
                                               (:maildir "/Dabuke/Queue"                :key ?Q)
                                               (:maildir "/Dabuke/SBL"                  :key ?b)
                                               (:maildir "/Dabuke/Sent"                 :key ?s)
                                               (:maildir "/Dabuke/Spam"                 :key ?S)
                                               (:maildir "/Dabuke/TrainGood"            :key ?G)
                                               (:maildir "/Dabuke/TrainSpam"            :key ?B)
                                               (:maildir "/Dabuke/Trash"                :key ?T)
                                               (:maildir "/Dabuke/zillow"               :key ?z)))
                    (message-sendmail-extra-arguments . ("--account=Dabuke"))
                    (mu4e-compose-signature .
                                            (concat
                                             "William Marty Buchaus Jr\n"
                                             "A person is smart. People are dumb,panicky dangerous animals and you know it. -k MIB\n"
                                             "Meet on the level Act by the Plumb and Part upon the Square  AF&AM 832\n"
                                             "https://snuffy.org\n https://realhousehunters.com\n"))))

;;;;;; Rackspace
          ,(make-mu4e-context
            :name "Rackspace"
            :enter-func (lambda () (mu4e-message "Switch to the Rackspace context"))
            :leave-func (lambda () (mu4e-message "Leaving Rackspace context"))
            :vars '((user-mail-address       . "marty.buchaus@rackspace.com")
                    (mu4e-get-mail-command   . "mbsync Rackspace")
                    (mu4e-trash-folder       . "/Rackspace/Deleted Items")
                    (mu4e-refile-folder      . "/Rackspace/Archive")
                    (mu4e-drafts-folder      . "/Rackspace/Drafts")
                    (mu4e-sent-folder        . "/Rackspace/Sent Items")
                    (user-full-name          . "Marty Buchaus")
                    (mu4e-maildir-shortcuts  . ((:maildir "/Rackspace/Archive"                     :key ?a)
                                                (:maildir "/Rackspace/Deleted Items"               :key ?T)
                                                (:maildir "/Rackspace/Drafts"                      :key ?d)
                                                (:maildir "/Rackspace/IM"                          :key ?I)
                                                (:maildir "/Rackspace/INBOX"                       :key ?i)
                                                (:maildir "/Rackspace/Junk Email"                  :key ?2)
                                                (:maildir "/Rackspace/Junk"                        :key ?j)
                                                (:maildir "/Rackspace/Lists/.Alert Logic"          :key ?A)
                                                (:maildir "/Rackspace/Lists/.Confluence"           :key ?C)
                                                (:maildir "/Rackspace/Lists/.Incident Management"  :key ?M)
                                                (:maildir "/Rackspace/Lists/.Linux Techs"          :key ?L)
                                                (:maildir "/Rackspace/Lists/.New Relic"            :key ?N)
                                                (:maildir "/Rackspace/Lists/.SA-FUN"               :key ?S)
                                                (:maildir "/Rackspace/Lists/.Vul"                  :key ?V)
                                                (:maildir "/Rackspace/Outbox"                      :key ?O)
                                                (:maildir "/Rackspace/Sent Items"                  :key ?s)))
                    (message-sendmail-extra-arguments . ("--account=Rackspace"))
                    (mu4e-compose-signature .
                                            (concat
                                             "William Marty Buchaus Jr\n"
                                             "Rackspace Netsec Infrastructure Linux Engineer\n"
                                             "mobile: 210-763-4052\n"
                                             "-Restorative-Learner-Futuristic-Responsibility-Communication\n"
                                             "A person is smart. People are dumb,panicky dangerous animals and you know it. -k MIB\n"
                                             ))))
;;;;;; Radhits
          ,(make-mu4e-context
            :name "TRadhits"
            :enter-func (lambda () (mu4e-message "Switch to the Rad Hits context"))
            :leave-func (lambda () (mu4e-message "Leaving Rad Hits context"))
            :vars '((user-mail-address       . "marty@radhits.net")
                    (mu4e-get-mail-command   . "mbsync Radhits")
                    (mu4e-trash-folder       . "/Radhits/Trash")
                    (mu4e-refile-folder      . "/Radhits/Archive")
                    (mu4e-drafts-folder      . "/Radhits/Drafts")
                    (mu4e-sent-folder        . "/Radhits/Sent")
                    (user-full-name          . "Marty Buchaus")
                    (mu4e-maildir-shortcuts  . ((:maildir "/Radhits/INBOX"    :key ?i)
                                                (:maildir "/Radhits/Archive"  :key ?a)
                                                (:maildir "/Radhits/Trash"    :key ?T)
                                                (:maildir "/Radhits/Sent"     :key ?s)))
                    (message-sendmail-extra-arguments . ("--account=Radhits"))
                    (mu4e-compose-signature .
                                            (concat
                                             "Marty Buchaus\n"
                                             "Meet on the Level Act by the Plumb and Part upon the Square\n"
                                             "mobile: 210-763-4052\n"))))
;;;;;; RedEarth Group Inc
          ,(make-mu4e-context
            :name "ERedEarthgroupinc"
            :enter-func (lambda () (mu4e-message "Switch to the Red Earth Group context"))
            :leave-func (lambda () (mu4e-message "Leaving Red Earth Group context"))
            :vars '((user-mail-address       . "marty@redearthgroupinc.com")
                    (mu4e-get-mail-command   . "mbsync RedEarth")
                    (mu4e-trash-folder       . "/RedEarth/Trash")
                    (mu4e-refile-folder      . "/RedEarth/Archive")
                    (mu4e-drafts-folder      . "/RedEarth/Drafts")
                    (mu4e-sent-folder        . "/RedEarth/Sent")
                    (user-full-name          . "Marty Buchaus")
                    (mu4e-maildir-shortcuts  . ((:maildir "/RedEarth/INBOX"      :key ?i)
                                                (:maildir "/RedEarth/Archive"    :key ?a)
                                                (:maildir "/RedEarth/Drafts"     :key ?d)
                                                (:maildir "/RedEarth/Trash"      :key ?T)
                                                (:maildir "/REdEarth/TrainGood"  :key ?G)
                                                (:maildir "/REdEarth/TrainSpam"  :key ?B)
                                                (:maildir "/REdEarth/JUnk"       :key ?S)
                                                (:maildir "/RedEarth/Sent"       :key ?s)))
                    (message-sendmail-extra-arguments . ("--account=RedEarth"))
                    (mu4e-compose-signature .
                                            (concat
                                             "Marty Buchaus\n"
                                             "Meet on the Level Act by the Plumb and Part upon the Square\n"
                                             "mobile: 210-763-4052\n"))))
;;;;;; RE Construction FL

          ,(make-mu4e-context
            :name "FREconstructionfl"
            :enter-func (lambda () (mu4e-message "Switch to the Red Earth Construction FL context"))
            :leave-func (lambda () (mu4e-message "Leaving Red Earth Construction FL context"))
            :vars '((user-mail-address       . "marty@reconstructionfl.com")
                    (mu4e-get-mail-command   . "mbsync reconstructionfl")
                    (mu4e-trash-folder       . "/reconstructionfl/Trash")
                    (mu4e-refile-folder      . "/reconstructionfl/Archive")
                    (mu4e-drafts-folder      . "/reconstructionfl/Drafts")
                    (mu4e-sent-folder        . "/reconstructionfl/Sent")
                    (user-full-name          . "Marty Buchaus")
                    (mu4e-maildir-shortcuts  . ((:maildir "/reconstructionfl/INBOX"      :key ?i)
                                                (:maildir "/reconstructionfl/Archive"    :key ?a)
                                                (:maildir "/reconstructionfl/Drafts"     :key ?d)
                                                (:maildir "/reconstructionfl/TrainGood"  :key ?G)
                                                (:maildir "/reconstructionfl/TrainSpam"  :key ?B)
                                                (:maildir "/reconstructionfl/JUnk"       :key ?S)
                                                (:maildir "/reconstructionfl/Trash"      :key ?T)
                                                (:maildir "/reconstructionfl/Sent"       :key ?s)))
                    (message-sendmail-extra-arguments . ("--account=ReConstructionFL"))
                    (mu4e-compose-signature .
                                            (concat
                                             "Marty Buchaus\n"
                                             "Meet on the Level Act by the Plumb and Part upon the Square\n"
                                             "mobile: 210-763-4052\n"))))

;;;;;; Google
          ,(make-mu4e-context
            :name "Gmail"
            :enter-func (lambda () (mu4e-message "Switch to the Gmail context"))
            :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
            :vars '((user-mail-address       . "snuffop@gmail.com")
                    (mu4e-get-mail-command   . "mbsync Google")
                    (mu4e-trash-folder       . "/Google/Trash")
                    (mu4e-drafts-folder      . "/Google/Drafts")
                    (mu4e-sent-folder        . "/Google/Sent")
                    (mu4e-refile-folder      . "/Dabuke/Archive")
                    (user-full-name          . "Marty Buchaus")
                    (mu4e-maildir-shortcuts  . ((:maildir "/Google/Drafts"            :key ?d)
                                                (:maildir "/Google/INBOX"             :key ?i)
                                                (:maildir "/Google/MMS-SMS"           :key ?M)
                                                (:maildir "/Google/Sent"              :key ?s)
                                                (:maildir "/Google/Trash"             :key ?T)
                                                (:maildir "/Google/Unwanted"          :key ?U)
                                                (:maildir "/Google/[Gmail]/.All Mail" :key ?a)
                                                (:maildir "/Google/queue"             :key ?Q)))
                    (message-sendmail-extra-arguments . ("--account=Google"))
                    (mu4e-compose-signature .
                                            (concat
                                             "Marty Buchaus\n"
                                             "Meet on the Level Act by the Plumb and Part upon the Square\n"))))
;;;;;; Real House Hunters
          ,(make-mu4e-context
            :name "HH"
            :enter-func (lambda () (mu4e-message "Switch to the RHH context"))
            :leave-func (lambda () (mu4e-message "Leaving RHH context"))
            :vars '((user-mail-address      . "wbuchaus@realhousehunters.com")
                    (mu4e-get-mail-command  . "mbsync RHH")
                    (mu4e-refile-folder     . "/RHH/Archive")
                    (mu4e-trash-folder      . "/RHH/Trash")
                    (mu4e-drafts-folder     . "/RHH/Drafts")
                    (mu4e-sent-folder       . "/RHH/Sent")
                    (user-full-name         . "Marty Buchaus")
                    (mu4e-maildir-shortcuts . ((:maildir "/RHH/INBOX"   :key ?i)
                                               (:maildir "/RHH/Trash"   :key ?T)
                                               (:maildir "/RHH/Drafts"  :key ?d)
                                               (:maildir "/RHH/Archive" :key ?a)
                                               (:maildir "/RHH/Sent"    :key ?s)))
                    (message-sendmail-extra-arguments . ("--account=RHH"))
                    (mu4e-compose-signature .
                                            (concat
                                             "Marty Buchaus\n"
                                             "Real House Hunters / Jazney Inc\n"))))))
;;;;;; End Contexts
  )
#+END_SRC

* functions
** Buffers
*** This Function replicates the  SPC Tab functionality of Spacemacs.

#+BEGIN_SRC emacs-lisp
(defun marty/switch-to-other-buffer ()
  "Switch to other buffer"
  (interactive)
  (switch-to-buffer (other-buffer)))

(map! :leader
      :desc "Prev Buffer"  "TAB" #'marty/switch-to-other-buffer)
#+END_SRC

*** Reformat Buffer
Snagged this from Zzamboni

#+BEGIN_SRC emacs-lisp

(defun marty/org-reformat-buffer ()
  (interactive)
  (when (y-or-n-p "Really format current buffer? ")
    (let ((document (org-element-interpret-data (org-element-parse-buffer))))
      (erase-buffer)
      (insert document)
      (goto-char (point-min)))))

#+END_SRC

** Counsel recoll
#+BEGIN_SRC emacs-lisp

(defun counsel-recoll (&optional initial-input)
  "Search for a string in the recoll database.
You'll be given a list of files that match.
Selecting a file will launch `swiper' for that file.
INITIAL-INPUT can be given as the initial minibuffer input."
  (interactive)
  (ivy-read "recoll: " 'counsel-recoll-function
            :initial-input initial-input
            :dynamic-collection t
            :history 'counsel-git-grep-history
            :action (lambda (x)
                      (when (string-match "file://\\(.*\\)\\'" x)
                        (let ((file-name (match-string 1 x)))
                          (find-file file-name)
                          (unless (string-match "pdf$" x)
                            (swiper ivy-text)))))))


(defun counsel-recoll-function (string &rest _unused)
  "Issue recallq for STRING."
  (if (< (length string) 3)
      (ivy-more-chars)
    (counsel--async-command
     (format "recollq -b '%s'" string))
    nil))

(map! :leader
      (:prefix ("a")
       :desc "counsel recoll"  "r" #'counsel-recoll ))
#+END_SRC

* Other Tools
** Auto Insert
#+BEGIN_SRC emacs-lisp

(defun marty/autoinsert-yas-expand ()
  (let ((template ( buffer-string )))
  (delete-region (point-min) (point-max))
  (yas-expand-snippet template)
  (evil-insert-state)))

(use-package! autoinsert
  :defer t
  :init (progn
          (setq auto-insert-query nil)
          (setq auto-insert-directory "~/.config/doom/templates")
          (add-hook 'find-file-hook 'auto-insert)
          (auto-insert-mode 1))
  :config (progn
            (define-auto-insert "\.html?$" "default.html")
            (define-auto-insert "\.org" ["default.org" marty/autoinsert-yas-expand])
            (define-auto-insert "\.sh" ["default.sh" marty/autoinsert-yas-expand])
            (define-auto-insert "\.el" ["default.el" marty/autoinsert-yas-expand])
            (define-auto-insert "Blorg/snuffy-org/.+\.org?$" ["snuffy-org.org" marty/autoinsert-yas-expand])
            (define-auto-insert "Sites/snuffy.org/.+\.org?$" ["snuffy-org-posts.org" marty/autoinsert-yas-expand])
            (define-auto-insert "salt-master.+\.org?$" ["salt-master.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/[^/]+\.org?$" ["NSI-Documentation.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/tipjar/[^/]+\.org?$" ["NSI-Documentation-tipjar.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/TVA/[^/]+\.org?$" ["NSI-Documentation-TVA.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/TVA/ScanReports/.+[^/]+\.org?$" ["NSI-Documentation-TVA-scanreport.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/Patching/.+[^/]+\.org?$" ["NSI-Documentation-Patching-Notes.org" marty/autoinsert-yas-expand])
            (define-auto-insert "masons/.+\.org?$" ["masonsMeetingMinuets.org" marty/autoinsert-yas-expand])
            (define-auto-insert "daily/.+\.org?$" ["defaultRoamDaily.org" marty/autoinsert-yas-expand])
            (define-auto-insert "/[0-9]\{8\}.org$" ["defaultJournal.org" marty/autoinsert-yas-expand])))
            #+END_SRC

** Aggressive Indent
(package! aggressive-indent)

#+BEGIN_SRC emacs-lisp
(use-package! aggressive-indent
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'clojure-mode-hook    #'aggressive-indent-mode)
  (add-hook 'php-mode-hook #'aggressive-indent-mode)
  (add-hook 'hy-mode-hook #'aggressive-indent-mode))

(global-aggressive-indent-mode 1)
  #+END_SRC

** Counsel Tramp
#+BEGIN_SRC emacs-lisp
(use-package! counsel-tramp
  :after tramp)
#+END_SRC
** File Templates
#+BEGIN_SRC emacs-lisp

;; (set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
;; (set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
;; (set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)
#+END_SRC

** I3wm
#+BEGIN_SRC emacs-lisp
(use-package! i3wm-config-mode
  :defer t)
#+END_SRC

** Key chain
#+BEGIN_SRC emacs-lisp
(use-package! keychain-environment
  :defer t
  :init (keychain-refresh-environment))
#+END_SRC

** Khard el
#+BEGIN_SRC emacs-lisp
(use-package! khardel
  :defer t)
#+END_SRC

** Mutt Mode
#+BEGIN_SRC emacs-lisp

(use-package! mutt   ;; local loaded
  :config (progn
            (add-to-list 'auto-mode-alist '("/tmp/neomutt.*"        . mutt-mode))
            (add-to-list 'auto-mode-alist '("/tmp/mutt.*"           . mutt-mode))))

(use-package! muttrc-mode  ;; Packages
  :defer t
  :config (progn
            (add-to-list 'auto-mode-alist '("mutt\\'" . muttrc-mode))
            (add-to-list 'auto-mode-alist '("muttrc\\'" . muttrc-mode))))
#+END_SRC

** PacFiles Mode
#+BEGIN_SRC emacs-lisp
(use-package! pacfiles-mode
  :defer t)
#+END_SRC

** Paperless
#+BEGIN_SRC emacs-lisp
(use-package! paperless
  :defer t
  :init (require 'org-paperless)
  :config (progn
            (custom-set-variables
             '(paperless-capture-directory "~/Nextcloud/Documents/INBOX/")
             '(paperless-root-directory "~/Nextcloud/Documents"))
            (map! :map paperless-mode-map
                  :n "d" #'paperless-display
                  :n "r" #'paperless-rename
                  :n "R" #'paperless-scan-directories
                  :n "f" #'paperless-file
                  :n "x" #'paperless-execute)))

(map! :leader
      (:prefix ("a" . "application")
       :desc "Paperless"  "P" #'paperless))
#+END_SRC

** Spacemacs Layer tweaks
#+BEGIN_SRC emacs-lisp

  (spacemacs|define-custom-layout "@ORG"
    :ginding "o"
    :body
    (find-file "~/Nextcloud/Notes/org/0mobile.org"))

  (spacemacs|define-custom-layout "@SnuffyOrg"
    :binding "b"
    :body
    (find-file "~/Sites/snuffy.org/content-org/DailyNotes/Daily Notes 2021.org"))

  (spacemacs|define-custom-layout "@chezmoi"
    :binding "d"
    :body
    (find-file "~/.local/share/chezmoi/README.org"))

  (spacemacs|define-custom-layout "@Ledger"
    :binding "l"
    :body
    (find-file "~/Nextcloud/Documents/File Cabinet/Personal/ledger/ledger.ledger"))

  (spacemacs|define-custom-layout "@Rackspace"
    :binding "r"
    :body
    (find-file "~/Source/NSI/NSI-Documentation/README.org"))

  (spacemacs|define-custom-layout "@Salt"
    :binding "s"
    :body
    (find-file "~/Source/NSI/salt-master/README.org"))

#+END_SRC

** Salt Mode
#+BEGIN_SRC emacs-lisp
(use-package! salt-mode
  :defer t
  :config
  (add-hook 'salt-mode-hook
            (lambda ()
              (flyspell-mode 1))))
#+END_SRC
** Systemd
#+BEGIN_SRC emacs-lisp

(use-package! systemd
  :defer t)

(map! :map systemd-mode
      :localleader
      :prefix ("h" . "Help")
      "d" #'systemd-doc-directives
      "o" #'systemd-doc-open)
#+END_SRC

** Tramp
#+BEGIN_SRC emacs-lisp
(after! tramp

  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))

  (defvar disable-tramp-backups '(all))
  (setenv "SHELL" "/bin/bash")

  (setq tramp-default-method "sshx")
  (setq remote-file-name-inhibit-cache nil)
  (setq tramp-completion-reread-directory-timeout nil)
  (setq tramp-use-ssh-controlmaster-options t)

  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp)))

(after! counsel-tramp

  (map! :leader
        (:prefix ("a" . "application")
         (:prefix ("t" . "tramp")
          "c" #'tramp-cleanup-all-connections
          "b" #'tramp-cleanup-all-buffers
          "t" #'counsel-tramp
          "q" #'counsel-tramp-quit)))

  
  (add-hook 'counsel-tramp-pre-command-hook
            '(lambda () (global-aggressive-indent-mode 0)
               (projectile-mode 0)
               (editorconfig-mode 0)))

  (add-hook 'counsel-tramp-quit-hook
            '(lambda () (global-aggressive-indent-mode 1)
               (projectile-mode 1)
               (editorconfig-mode 1)))


;;;;; List of Hosts

  (setq counsel-tramp-custom-connections
        '(
          /sshx:appgate:/home/marty
          /sshx:appgate|sudo:appgate:/
          /sshx:archstation.home.snuffy.org:/home/marty
          /sshx:archstation.home.snuffy.org:/
          /sshx:d-proxy-1.iad3.nsi.rackspace.com:/
          /sshx:virtarch.home.snuffy.org:/
          /sshx:virtarch.home.snuffy.org|sudo:virtarch.home.snuffy.org:/
          /sshx:danas.home.snuffy.org:/
          /sshx:daplex.home.snuffy.org:/
          /sshx:daplex.home.snuffy.org|sudo:daplex.home.snuffy.org:/
          /sshx:l1.dabuke.com:/
          /sshx:l1.dabuke.com|sudo.l1.dabuke.com:/
          /sshx:root@l2.dabuke.com:/
          /sshx:marty@l2.dabuke.com:/home/marty/
          /sshx:nextcloud@l2.dabuke.com:/home/nextcloud/
          /sshx:mail.dabuke.com:/
          /sshx:mail.dabuke.com|sudo:mail.dabuke.com:/
          /sshx:macpro.home.snuffy.org:/
          /sshx:macpro.home.snuffy.org|sudo:macpro.home.snuffy.org:/
          /sshx:nextcloud.home.snuffy.org:/
          /sshx:nexthost.home.snuffy.org:/
          /sshx:ofmasons@l1.dabuke.com:/
          /sshx:radhits.net:/
          /sshx:radhits.net|sudo:radhits.net:/
          ;; RS
          /sshx:a-docker-netapi-1.iad3.nsi.rackspace.com|sudo:a-docker-netapi-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.iad3.nsi.rackspace.com|sudo:a-docker-netapi-2.iad3.nsi.rackspace.com:/
          /sshx:a-docker-services-1.iad3.nsi.rackspace.com|sudo:a-docker-services-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-services-2.iad3.nsi.rackspace.com|sudo:a-docker-services-2.iad3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.iad3.nsi.rackspace.com|sudo:a-docker-sshapi-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.iad3.nsi.rackspace.com|sudo:a-docker-sshapi-2.iad3.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.iad3.nsi.rackspace.com|sudo:a-iso-mirror-1.iad3.nsi.rackspace.com:/
          /sshx:a-redis-1.iad3.nsi.rackspace.com|sudo:a-redis-1.iad3.nsi.rackspace.com:/
          /sshx:a-redis-2.iad3.nsi.rackspace.com|sudo:a-redis-2.iad3.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.iad3.nsi.rackspace.com|sudo:a-salt-syndic-1.iad3.nsi.rackspace.com:/
          /sshx:a-nagios-1.iad3.nsi.rackspace.com|sudo:a-nagios-1.iad3.nsi.rackspace.com:/
          /sshx:a-syslog-1.iad3.nsi.rackspace.com|sudo:a-syslog-1.iad3.nsi.rackspace.com:/
          /sshx:a-syslog-2.iad3.nsi.rackspace.com|sudo:a-syslog-2.iad3.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.iad3.nsi.rackspace.com|sudo:a-zabbix-proxy-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.syd2.nsi.rackspace.com|sudo:a-docker-netapi-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.syd2.nsi.rackspace.com|sudo:a-docker-netapi-2.syd2.nsi.rackspace.com:/
          /sshx:a-docker-services-1.syd2.nsi.rackspace.com|sudo:a-docker-services-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-services-2.syd2.nsi.rackspace.com|sudo:a-docker-services-2.syd2.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.syd2.nsi.rackspace.com|sudo:a-docker-sshapi-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.syd2.nsi.rackspace.com|sudo:a-docker-sshapi-2.syd2.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.syd2.nsi.rackspace.com|sudo:a-iso-mirror-1.syd2.nsi.rackspace.com:/
          /sshx:a-redis-1.syd2.nsi.rackspace.com|sudo:a-redis-1.syd2.nsi.rackspace.com:/
          /sshx:a-redis-2.syd2.nsi.rackspace.com|sudo:a-redis-2.syd2.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.syd2.nsi.rackspace.com|sudo:a-salt-syndic-1.syd2.nsi.rackspace.com:/
          /sshx:a-syslog-1.syd2.nsi.rackspace.com|sudo:a-syslog-1.syd2.nsi.rackspace.com:/
          /sshx:a-syslog-2.syd2.nsi.rackspace.com|sudo:a-syslog-2.syd2.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.syd2.nsi.rackspace.com|sudo:a-zabbix-proxy-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.lon3.nsi.rackspace.com|sudo:a-docker-netapi-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.lon3.nsi.rackspace.com|sudo:a-docker-netapi-2.lon3.nsi.rackspace.com:/
          /sshx:a-docker-services-1.lon3.nsi.rackspace.com|sudo:a-docker-services-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-services-2.lon3.nsi.rackspace.com|sudo:a-docker-services-2.lon3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.lon3.nsi.rackspace.com|sudo:a-docker-sshapi-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.lon3.nsi.rackspace.com|sudo:a-docker-sshapi-2.lon3.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.lon3.nsi.rackspace.com|sudo:a-iso-mirror-1.lon3.nsi.rackspace.com:/
          /sshx:a-redis-1.lon3.nsi.rackspace.com|sudo:a-redis-1.lon3.nsi.rackspace.com:/
          /sshx:a-redis-2.lon3.nsi.rackspace.com|sudo:a-redis-2.lon3.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.lon3.nsi.rackspace.com|sudo:a-salt-syndic-1.lon3.nsi.rackspace.com:/
          /sshx:a-syslog-1.lon3.nsi.rackspace.com|sudo:a-syslog-1.lon3.nsi.rackspace.com:/
          /sshx:a-syslog-2.lon3.nsi.rackspace.com|sudo:a-syslog-2.lon3.nsi.rackspace.com:/
          /sshx:s-jenkins-uk-1.lon3.nsi.rackspace.com|sudo:s-jenkins-uk-1.lon3.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.lon3.nsi.rackspace.com|sudo:a-zabbix-proxy-1.lon3.nsi.rackspace.com:/
          /sshx:a-nagios-1.lon3.nsi.rackspace.com|sudo:a-nagios-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.hkg1.nsi.rackspace.com|sudo:a-docker-netapi-1.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.hkg1.nsi.rackspace.com|sudo:a-docker-netapi-2.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.hkg1.nsi.rackspace.com|sudo:a-docker-services-1.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-services-2.hkg1.nsi.rackspace.com|sudo:a-docker-services-2.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.hkg1.nsi.rackspace.com|sudo:a-docker-sshapi-1.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.hkg1.nsi.rackspace.com|sudo:a-docker-sshapi-2.hkg1.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.hkg1.nsi.rackspace.com|sudo:a-iso-mirror-1.hkg1.nsi.rackspace.com:/
          /sshx:a-redis-1.hkg1.nsi.rackspace.com|sudo:a-redis-1.hkg1.nsi.rackspace.com:/
          /sshx:a-redis-2.hkg1.nsi.rackspace.com|sudo:a-redis-2.hkg1.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.hkg1.nsi.rackspace.com|sudo:a-salt-syndic-1.hkg1.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.hkg1.nsi.rackspace.com|sudo:a-zabbix-proxy-1.hkg1.nsi.rackspace.com:/
          /sshx:a-syslog-1.hkg1.nsi.rackspace.com|sudo:a-syslog-1.hkg1.nsi.rackspace.com:/
          /sshx:a-syslog-2.hkg1.nsi.rackspace.com|sudo:a-syslog-2.hkg1.nsi.rackspace.com:/
          /sshx:a-backup-1.ord1.nsi.rackspace.com|sudo:a-backup-1.ord1.nsi.rackspace.com:/
          /sshx:a-bastion-1.ord1.nsi.rackspace.com|sudo:a-bastion-1.ord1.nsi.rackspace.com:/
          /sshx:a-bastion-2.ord1.nsi.rackspace.com|sudo:a-bastion-2.ord1.nsi.rackspace.com:/
          /sshx:a-datastore-1.ord1.nsi.rackspace.com|sudo:a-datastore-1.ord1.nsi.rackspace.com:/
          /sshx:a-datastore-2.ord1.nsi.rackspace.com|sudo:a-datastore-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.ord1.nsi.rackspace.com|sudo:a-docker-netapi-1.ord1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.ord1.nsi.rackspace.com|sudo:a-docker-netapi-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-registry-2.ord1.nsi.rackspace.com|sudo:a-docker-registry-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.ord1.nsi.rackspace.com|sudo:a-docker-services-1.ord1.nsi.rackspace.com:/
          /sshx:a-docker-services-2.ord1.nsi.rackspace.com|sudo:a-docker-services-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.ord1.nsi.rackspace.com|sudo:a-docker-sshapi-1.ord1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.ord1.nsi.rackspace.com|sudo:a-docker-sshapi-2.ord1.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.ord1.nsi.rackspace.com|sudo:a-iso-mirror-1.ord1.nsi.rackspace.com:/
          /sshx:a-jenkins-1.ord1.nsi.rackspace.com|sudo:a-jenkins-1.ord1.nsi.rackspace.com:/
          /sshx:a-redis-1.ord1.nsi.rackspace.com|sudo:a-redis-1.ord1.nsi.rackspace.com:/
          /sshx:a-redis-2.ord1.nsi.rackspace.com|sudo:a-redis-2.ord1.nsi.rackspace.com:/
          /sshx:a-salt-master-1.ord1.nsi.rackspace.com|sudo:a-salt-master-1.ord1.nsi.rackspace.com:/
          /sshx:a-salt-master-2.ord1.nsi.rackspace.com|sudo:a-salt-master-2.ord1.nsi.rackspace.com:/
          /sshx:d-salt-master-1.iad3.nsi.rackspace.com|sudo:d-salt-master-1.iad3.nsi.rackspace.com:/
          /sshx:a-scriptrunner-1.ord1.nsi.rackspace.com|sudo:a-scriptrunner-1.ord1.nsi.rackspace.com:/
          /sshx:a-scriptrunner-2.ord1.nsi.rackspace.com|sudo:a-scriptrunner-2.ord1.nsi.rackspace.com:/
          /sshx:a-syslog-1.ord1.nsi.rackspace.com|sudo:a-syslog-1.ord1.nsi.rackspace.com:/
          /sshx:a-syslog-2.ord1.nsi.rackspace.com|sudo:a-syslog-2.ord1.nsi.rackspace.com:/
          /sshx:a-websvcs-1.ord1.nsi.rackspace.com|sudo:a-websvcs-1.ord1.nsi.rackspace.com:/
          /sshx:a-websvcs-2.ord1.nsi.rackspace.com|sudo:a-websvcs-2.ord1.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.ord1.nsi.rackspace.com|sudo:a-zabbix-proxy-1.ord1.nsi.rackspace.com:/
          /sshx:a-datastore-1.dfw3.nsi.rackspace.com|sudo:a-datastore-1.dfw3.nsi.rackspace.com:/
          /sshx:a-datastore-2.dfw3.nsi.rackspace.com|sudo:a-datastore-2.dfw3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.dfw1.nsi.rackspace.com|sudo:a-docker-netapi-1.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.dfw1.nsi.rackspace.com|sudo:a-docker-netapi-2.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.dfw1.nsi.rackspace.com|sudo:a-docker-services-1.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-services-2.dfw1.nsi.rackspace.com|sudo:a-docker-services-2.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.dfw1.nsi.rackspace.com|sudo:a-docker-sshapi-1.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.dfw1.nsi.rackspace.com|sudo:a-docker-sshapi-2.dfw1.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.dfw1.nsi.rackspace.com|sudo:a-iso-mirror-1.dfw1.nsi.rackspace.com:/
          /sshx:a-redis-1.dfw1.nsi.rackspace.com|sudo:a-redis-1.dfw1.nsi.rackspace.com:/
          /sshx:a-redis-2.dfw1.nsi.rackspace.com|sudo:a-redis-2.dfw1.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.dfw1.nsi.rackspace.com|sudo:a-salt-syndic-1.dfw1.nsi.rackspace.com:/
          /sshx:a-syslog-1.dfw1.nsi.rackspace.com|sudo:a-syslog-1.dfw1.nsi.rackspace.com:/
          /sshx:a-syslog-2.dfw1.nsi.rackspace.com|sudo:a-syslog-2.dfw1.nsi.rackspace.com:/
          /sshx:a-nagios-1.dfw1.nsi.rackspace.com|sudo:a-nagios-1.dfw1.nsi.rackspace.com:/
          /sshx:a-websvcs-1.dfw1.nsi.rackspace.com|sudo:a-websvcs-1.dfw1.nsi.rackspace.com:/
          /sshx:a-websvcs-2.dfw1.nsi.rackspace.com|sudo:a-websvcs-2.dfw1.nsi.rackspace.com:/
          /sshx:a-websvcs-3.dfw1.nsi.rackspace.com|sudo:a-websvcs-3.dfw1.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.dfw3.nsi.rackspace.com|sudo:a-zabbix-proxy-1.dfw3.nsi.rackspace.com:/
          /sshx:a-scriptrunner-1.dfw3.nsi.rackspace.com|sudo:a-scriptrunner-1.dfw3.nsi.rackspace.com:/
          /sshx:a-scriptrunner-2.dfw3.nsi.rackspace.com|sudo:a-scriptrunner-2.dfw3.nsi.rackspace.com:/
          /sshx:a-bastion-1.dfw3.nsi.rackspace.com|sudo:a-bastion-1.dfw3.nsi.rackspace.com:/
          /sshx:a-jenkins-1.dfw3.nsi.rackspace.com|sudo:a-jenkins-1.dfw3.nsi.rackspace.com:/
          )))
#+END_SRC
** VLV
#+BEGIN_SRC emacs-lisp
(use-package! vlf-setup
  :defer-incrementally  vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+END_SRC

** Wakatime
Load the Module
(package! wakatime-mode)

Use and configure the module
#+BEGIN_SRC emacs-lisp

(use-package! wakatime-mode
  :hook (doom-first-buffer . global-wakatime-mode)
  :config
  (setq wakatime-cli-path "/usr/bin/wakatime")
  (setq wakatime-api-key (auth-source-pass-get 'secret "Application/wakatime/apikey")))
#+END_SRC
