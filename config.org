#+TITLE:  Marty Buchaus Doom Emacs Config
#+AUTHOR: Marty Buchaus
#+EMAIL:  marty@dabuke.com
#+SETUPFILE: ~/Nextcloud/Notes/org/notes-style.org
#+STARTUP: overview

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
  - [[#headers-of-files][Headers of Files]]
  - [[#initel][init.el]]
- [[#global-settings][GLOBAL SETTINGS]]
- [[#company-settings][COMPANY SETTINGS]]
- [[#fonts-and-faces][FONTS and FACES]]
  - [[#fonts][Fonts]]
- [[#theme][THEME]]
- [[#spelling][SPELLING]]
- [[#line-numbers][LINE NUMBERS]]
- [[#org-mode][ORG-MODE]]
  - [[#packages][Packages]]
  - [[#config-][Config <]]
  - [[#org-super-agenda][org-super-agenda]]
  - [[#org-pandoc][org-pandoc]]
  - [[#0rg-publish-functions][0rg publish functions]]
  - [[#org-roam][org-roam]]
  - [[#org-transclusion][org-transclusion]]
  - [[#org-edna][org-edna]]
  - [[#tsfile-links][TSfile Links]]
  - [[#load-org][LOAD ORG]]
- [[#calendar][CALENDAR]]
  - [[#org-caldav][org-caldav]]
- [[#functions][FUNCTIONS]]
  - [[#open-file-functions][Open File Functions]]
  - [[#mutt-functions][Mutt Functions]]
  - [[#prot-functions][PROT Functions]]
  - [[#load-functions-file][Load functions File]]
- [[#mu4e][MU4E]]
  - [[#mu4e-functions][mu4e functions]]
  - [[#experimental-test-from-henric-to-prefer-text-over-html-and-rich][Experimental test from Henric to prefer text over html and rich]]
  - [[#start-mu4e][Start Mu4e]]
  - [[#load-mu4eel][Load mu4e.el]]
  - [[#mu4e-column-faces][mu4e column faces]]
- [[#keybinding][KEYBINDING]]
  - [[#global-bindings][Global Bindings]]
  - [[#leader-bindings][Leader Bindings]]
  - [[#load-keybindingsel][Load keybindings.el]]
- [[#modules][MODULES]]
  - [[#aggressive-indent][Aggressive indent]]
  - [[#alert][alert]]
  - [[#all-the-icons-completion][all the icons completion]]
  - [[#auto-insert][auto insert]]
  - [[#i3-window-manager-config][I3 Window manager Config]]
  - [[#khard][khard]]
  - [[#magit][magit]]
  - [[#outshine][outshine]]
  - [[#paperless][paperless]]
  - [[#saltstack][saltstack]]
  - [[#systemd-mode][systemd mode]]
  - [[#tramp][tramp]]
  - [[#treemacs][treemacs]]
  - [[#tree-sitter][tree-sitter]]
  - [[#very-large-file][very large file]]
  - [[#wakatime][wakatime]]
- [[#custom][CUSTOM]]

* ABOUT THIS CONFIG
This is my personal config of Doom Emacs. making heavy use of EVIL everywhere
** Headers of Files
*** config.el
the header of the config.el file followes

#+BEGIN_SRC emacs-lisp
;; $DOOMDIR/config.el --- Summary -*- lexical-binding: t; -*-
;;
;; Author: Marty Buchaus <marty@dabuke.com>
;; Copyright © 2021, Marty Buchaus, all rights reserved.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;

#+END_SRC

*** functions.el
Functions.el   pretty self explanatory

#+BEGIN_SRC emacs-lisp :tangle functions.el
;;; functions.el --- Summary -*- lexical-binding: t; -*-
;;
;; Author: Marty Buchaus <marty@dabuke.com>
;; Copyright © 2021, Marty Buchaus, all rights reserved.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;;; Functions
#+END_SRC
*** org-mode.el
org-mode.el  Header file for the org-mode  config

#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;;; org-mode.el --- Summary -*- lexical-binding: t -*-
;;
;; Author: Marty Buchaus <marty@dabuke.com>
;; Copyright © 2021, Marty Buchaus, all rights reserved.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(after! org

#+END_SRC

*** packages.el
#+BEGIN_SRC emacs-lisp :tangle packages.el
;;; packages.el --- Summary -*- lexical-binding: t; -*-
;;
;; Author: Marty Buchaus <marty@dabuke.com>
;; Copyright © 2021, Marty Buchaus, all rights reserved.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Packages

#+END_SRC
*** mu4e.el
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;;; mu4e.el --- Summary -*- lexical-binding: t; -*-
;;
;; Author: Marty Buchaus <marty@dabuke.com>
;; Copyright © 2021, Marty Buchaus, all rights reserved.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Code:

#+END_SRC
*** keybindings.el
#+BEGIN_SRC emacs-lisp :tangle keybindings.el
;;; $DOOMDIR/keybindings.el --- Summary -*- lexical-binding: t; -*-
;;
;; Author: Marty Buchaus <marty@dabuke.com>
;; Copyright © 2021, Marty Buchaus, all rights reserved.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:
#+END_SRC

** init.el
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company           ; the ultimate code completion backend
        +childframe)
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;; (ivy               ; a search engine for love and life
       ;; +prescient
       ;; +fuzzy
       (vertico
        +icons)

       :ui
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures         ; ligatures and symbols to make your code pretty again
        +extras)
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +defaults
        +all)
       ;;tabs              ; a tab bar for Emacs
       (treemacs          ; a project drawer, like neotree but cooler
        +lsp)
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;; (window-select     ; visually switch windows
       ;;  +numbers)
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;;file-templates    ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       format              ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired             ; making dired pretty [functional]
        +icons)
       electric          ; smarter, keyword-based electric-indent
       (ibuffer         ; interactive buffer management
        +icons)
       (undo              ; persistent, smarter undo for your inevitable mistakes
        +tree)
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax           ; tasing you for every semicolon you forget
        +childframe)
       (spell
        +aspell)         ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;; gist              ; interacting with github gists
       (lookup              ; navigate your code and its documentation
        +dictionary
        +docsets)
       lsp
       (magit             ; a git porcelain for Emacs
        +forge)
       make              ; run make tasks from Emacs
       (pass              ; password manager for nerds
        +auth)
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       ;; (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       (haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;; ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
        +hugo
        +pandoc
        +pretty
        +pomodoro
        +noter
        +present
        +gnuplot
        +roam2)
       (php               ; perl's insecure younger brother
        +lsp)
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;; rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       mu4e
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default
         +bindings
         +smartparens))
#+END_SRC

* GLOBAL SETTINGS

Set Default variables  and hooks to be seen globally

#+BEGIN_SRC emacs-lisp
;; Global
(setq user-full-name "Marty Buchaus")
(setq user-mail-address "marty@dabuke.com")

(setq-default enable-local-variables t)            ; Allow for reading the local variables file
(setq-default delete-by-moving-to-trash t)
(setq-default window-combination-resize t)
(setq-default x-stretch-cursor t)

(setq undo-limit 80000000)                         ; Raise undo-limit to 80Mb
(setq evil-want-fine-undo t)                       ; By default while in insert all changes are one big blob. Be more granular
(setq auto-save-default t)                         ; Nobody likes to loose work, I certainly don't
(setq truncate-string-ellipsis "…")                ; Unicode ellispis are nicer than "...", and also save /precious/ space
(setq password-cache-expiry nil)                   ; I can trust my computers ... can't I?
(setq scroll-margin 2)                             ; It's nice to maintain a little margin
(setq confirm-kill-emacs nil)                      ; Stop hounding me and quit

(setq display-time-24hr-format t)
(display-time-mode 1)                             ; Enable time in the mode-line

(global-subword-mode 1)

;; Remove the s/S from evil snipe
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

#+END_SRC
* COMPANY SETTINGS
#+BEGIN_SRC emacs-lisp

(setq company-idle-delay 0.5)

#+END_SRC
* FONTS and FACES
** Fonts
#+BEGIN_SRC emacs-lisp
;; Fonts

(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 15)
      doom-unicode-font (font-spec :family "Symbola" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "Firacode Nerd Font" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+END_SRC

Faces adjustments

#+BEGIN_SRC emacs-lisp
;; Faces
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
(setq global-prettify-symbols-mode t)

(custom-set-faces!
  '(mode-line :family "DejaVu Sans Mono" :height 100)
  '(mode-line-inactive :family "DejaVu Sans Mono" :height 100))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! mixed-pitch)
#+END_SRC

Allow mixed fonts in a buffer. This is particularly useful for Org mode, so I
can mix source and prose blocks in the same document. I also manually enable
solaire-mode in Org mode as a workaround for font scaling not working properly.

#+BEGIN_SRC emacs-lisp

(add-hook! 'org-mode-hook #'mixed-pitch-mode)

#+END_SRC

* THEME

I have become quite attached to the dracula theme..

#+BEGIN_SRC emacs-lisp
;;;; Theme

(setq doom-theme 'doom-dracula )

#+END_SRC

* SPELLING

#+BEGIN_SRC emacs-lisp
;;;; Spelling

(after! spell-fu
  (setq spell-fu-idle-delay 0.5)
  (setq ispell-personal-dictionary (expand-file-name ".ispell_personal" doom-private-dir))
  )

#+END_SRC

* LINE NUMBERS
#+BEGIN_SRC emacs-lisp
;;;; Line Numbers

(setq display-line-numbers-type 'relative)
#+END_SRC

* ORG-MODE
#+begin_src emacs-lisp
;;;; Load Org Mode

(setq org-directory "~/Nextcloud/Notes/org/")
(setq org-roam-directory "~/Nextcloud/Notes/org/")
(setq org-contacts-files '("~/Nextcloud/Notes/org/contacts.org"))
#+end_src
** Packages
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-projectile)
#+END_SRC

** Config <
*** Mail/Mutt
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Mail/Mutt

(org-add-link-type "message" 'mutt-open-message)
#+END_SRC
*** org agenda
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;;;;; org agenda

(setq  marty/org-agenda-files (list
                               (concat org-directory "Tasks.org")
                               (concat org-directory "Habits.org")
                               (concat org-directory "Calendar.org")
                               (concat org-directory "contacts.org")
                               (concat org-directory "Someday.org")
                               (concat org-directory "0mobile.org")
                               "~/.cache/calendar/google.org"
                               "~/.cache/calendar/personal.org"
                               "~/.cache/calendar/tatjana.org"))
(after! org-agenda

  (setq org-agenda-block-separator nil)
  (setq org-agenda-compact-blocks t)
  (setq org-agenda-files marty/org-agenda-files)
  (setq org-agenda-include-deadlines t)
  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-tags-column 100) ;; from testing this seems to be a good value
  (setq org-agenda-window-setup 'current-window)
  (setq org-deadline-warning-days 14)

  ;; Ignore scheduled tasks in task list
  (setq org-agenda-todo-ignore-scheduled 'all)
  (setq org-agenda-todo-ignore-deadlines 'far)

  ;; Skip Finished Items
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)

  (require 'org-projectile)
  (mapcar #'(lambda (file)
              (when (file-exists-p file)
                (push file org-agenda-files)))
          (org-projectile-todo-files)))
#+END_SRC

*** publish-alist

  Proprietary Stuff for Rackspace mostly

#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;;;;; Publish Alist

(setq org-publish-project-alist
      '(
        ("NSI-Documentation-content"
         :base-directory "~/Source/NSI/NSI-Documentation/"
         :base-extension "org"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs"
         :publishing-function marty/publish
         :exclude "Archive"
         :section-numbers nil
         :with-toc nil
         :auto-sitemap t
         :sitemap-filename "filemap.org"
         :sitemap-title "& Sitemap"
         :headline-levels 10
         :auto-preamble t
         :recursive t)

        ("NSI-Documentation-images"
         :base-directory "~/Source/NSI/NSI-Documentation/images/"
         :base-extension "jpg\\|gif\\|png"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs/images/"
         :publishing-function org-publish-attachment
         :recursive t)

        ("NSI-Documentation-TVA-ScanReports-2020-images"
         :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2020/images/"
         :base-extension "jpg\\|gif\\|png"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2020/images/"
         :publishing-function org-publish-attachment
         :recursive t)

        ("NSI-Documentation-TVA-ScanReports-2020-reports"
         :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2020/reports/"
         :base-extension "ods\\|csv\\|xls\\|xslt\\|pdf"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2020/reports/"
         :publishing-function org-publish-attachment
         :recursive t)

        ("NSI-Documentation-TVA-ScanReports-2021-images"
         :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2021/images/"
         :base-extension "jpg\\|gif\\|png"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2021/images/"
         :publishing-function org-publish-attachment
         :recursive t)

        ("NSI-Documentation-TVA-ScanReports-2021-reports"
         :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/2021/reports/"
         :base-extension "ods\\|csv\\|xls\\|xslt\\|pdf"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/2021/reports/"
         :publishing-function org-publish-attachment
         :recursive t)

        ("NSI-Documentation-TVA-ScanReports-files"
         :base-directory "~/Source/NSI/NSI-Documentation/TVA/ScanReports/files/"
         :base-extension "ods\\|csv\\|xls\\|xslt\\|pdf"
         :publishing-directory "~/Source/NSI/NSI-Documentation/docs/TVA/ScanReports/files/"
         :publishing-function org-publish-attachment
         :recursive t)

        ("salt-master"
         :base-directory "~/Source/NSI/salt-master/"
         :base-extension "org"
         :publishing-directory "~/Source/NSI/salt-master/docs"
         :publishing-function marty/publish
         :exclude "docs"
         :section-numbers nil
         :with-toc nil
         :auto-sitemap t
         :sitemap-filename "filemap.org"
         :sitemap-title "& Sitemap"
         :headline-levels 7
         :auto-preamble t
         :recursive t)

        ("NSI-Documentation" :components ("NSI-Documentation-content" "NSI-Documentation-images" "NSI-Documentation-TVA-ScanReports-2020-images" "NSI-Documentation-TVA-ScanReports-2020-reports" "NSI-Documentation-TVA-ScanReports-2021-images" "NSI-Documentation-TVA-ScanReports-2021-reports" "NSI-Documentation-TVA-ScanReports-files"))))

#+END_SRC

*** Settings
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;;;;; Setting

(setq org-default-notes-file (concat org-directory "0mobile.org"))
(setq org-download-image-dir "~/Nextcloud/Notes/images/")
(setq org-id-locations-file "~/Nextcloud/Notes/org-id-locations")
(setq org-persp-startup-org-file "~/Nextcloud/Notes/org/0mobile.org")
(setq org-projectile-file "todo.org")
(setq org-fancy-priorities-list '("🅰" "🅱" "🅲" "🅳" "🅴"))
(setq org-clock-sound "~/Nextcloud/Music/sounds/shipsBell.wav")

(remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h)
#+END_SRC
**** Clocking
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; clocking

(setq org-clock-into-drawer "CLOCKING")          ;; Where to put the clock in and out for tracked items
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC
**** Logging and ID
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Logging and ID

(setq org-log-done t)
(setq org-log-into-drawer t)
(setq org-icalendar-store-UID t)
(setq org-id-track-globally t)
#+END_SRC
**** Refile Targets

Found this nice code bit  at the [[https://org-roam.discourse.group/t/refile-entries-nodes-between-org-files-and-org-roam-notes/1484][org-roam discourse]] and adapted to my flow

#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Refile targets

(setq myroamfiles (directory-files "~/Nextcloud/Notes/org/" t "org$"))
(setq myroamdailiesfiles (directory-files "~/Nextcloud/Notes/org/daily/" t "org$"))

(setq org-refile-targets '((nil :maxlevel . 3)
                           (org-agenda-files :maxlevel . 5)
                           (myroamfiles :maxlevel . 5)
                           (myroamdailiesfiles :maxlevel . 2)))

(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

*** symbols
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; symbols
(setq-default prettify-symbols-alist '(
                                       ("->"              . "→")
                                       ("->>"             . "↠")
                                       ("<-"              . "←")
                                       ("<="              . "≤")
                                       ("<|"              . "◁")
                                       ("=>"              . "⇒")
                                       (">="              . "≥")
                                       ("|>"              . "▷")
                                       ("[ ]"             . "☐")
                                       ("[-]"             . "⊡")
                                       ("[X]"             . "☑")
                                       ("lambda"          . "λ")
                                       ("#+BEGIN_EXAMPLE" . ">EG>")
                                       ("#+BEGIN_SRC"     . "†")
                                       ("#+END_EXAMPLE"   . "<EG<")
                                       ("#+END_SRC"       . "†")
                                       ("#+begin_example" . ">EG>")
                                       ("#+begin_src"     . "†")
                                       ("#+end_example"   . "<EG<")
                                       ("#+end_src"       . "†")
                                       ))
#+END_SRC
*** tags
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Tag List
(setq org-tag-alist (quote
                     ((:startgroup)
                      ("@ASITS"     . ?A)
                      ("@BillPay"   . ?B)
                      ("@RedEarth"  . ?D)
                      ("@Email"     . ?E)
                      ("@Jazney"    . ?J)
                      ("@Outside"   . ?o)
                      ("@PhoneCall" . ?p)
                      ("@Personal"  . ?P)
                      ("@Rackspace" . ?R)
                      ("@Reading"   . ?r)
                      ("@errand"    . ?e)
                      ("@home"      . ?h)
                      ("@inside"    . ?i)
                      ("@masons"    . ?M)
                      ("@music"     . ?m)
                      ("@office"    . ?O)
                      ("@system"    . ?x)
                      ("2637E20th")
                      (:endgroup)
                      ("CANCELLED"  . ?C)
                      ("DRAFT"      . ?D)
                      ("FLAGGED"    . ?F)
                      ("HOLD"       . ?H)
                      ("IDEA"       . ?I)
                      ("NOTE"       . ?N)
                      ("PROJECT"    . ?P)
                      ("WAITING"    . ?w)
                      ("WORK"       . ?W))))
#+END_SRC

*** Templates
#+BEGIN_SRC emacs-lisp :tangle org-mode.el

;;;;;; Capture Templates

(setq org-capture-templates
      '(("t" "Task" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
         (file "~/.config/doom/templates/todo.orgcaptmpl"))
        ("c" "Contacts" entry (file-olp "~/Nextcloud/Notes/org/contacts.org" "General")
         (file "~/.config/doom/templates/contact.orgcaptmpl"))
        ("p" "Protocol" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox" entry)
         "** %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
        ("R" "Remember-mutt" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Mail")
         (file "~/.config/doom/templates/org-templates/mail.orgcaptmpl"))
        ("L" "Protocol Link" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
         "** %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
        ("w" "Web site" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Inbox")
         (file "~/.config/doom/templates/org-templates/weblink.orgcaptmpl"))
        ("s" "Simple" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Popup")
         "%[~/.emacs.d/.org-popup]" :immediate-finish t :prepend t)

        ("m" "Email Workflow")
        ("mf" "Follow Up" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Follow Up")
         "* TODO Follow up with %:fromname on %:subject\nSCHEDULED:%t\n%a\n\n%i")
        ("ma" "auto Follow Up" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Follow Up")
         "* TODO Follow up with %:fromname on %:subject\n%a\n\n%i" :immediate-finish t)
        ("mF" "Follow Up With Deadline" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Follow Up")
         "* TODO Follow up with %:fromname on %:subject\nSCHEDULED:%t\nDEADLINE:%(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n%a\n\n%i")
        ("mr" "Read Later" entry
         (file+olp "~/Nextcloud/Notes/org/0mobile.org" "Read Later")
         "* TODO Read  Later on %:subject\nSCHEDULED:%t\n%a\n\n%i":immediate-finish t)
        ("mm" "Masons Follow Up" entry
         (file+olp "~/Nextcloud/Notes/org/Masons.org" "Follow Up")
         "* TODO Follow up with %:fromname on %:subject %a\nSCHEDULED:%t\n\\n%i")
        ("mR" "Workflow Rackspace")
        ("mRf" "Follow Up" entry
         (file+olp "~/Nextcloud/Notes/org/Rackspace.org" "Follow Up")
         "* TODO Follow up with %:fromname on %:subject\nSCHEDULED:%t\nDEADLINE:%(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n%a\n\n%i")
        ("mRr" "Read Later" entry
         (file+olp "~/Nextcloud/Notes/org/Rackspace.org" "Read Later")
         "* TODO Read  Later with %:fromname on %:subject\nSCHEDULED:%t\n%a\n\n%i" :immediate-finish t)
        ))

(setq org-protocol-default-template-key "t")
#+END_SRC

#+RESULTS:
: t

*** To Do Settings
**** faces
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Todo Faces
(setq org-todo-keyword-faces
      '(("TODO"       . org-warning)
        ("NEXT"       . (:foreground "#008080" :weight bold))
        ("STARTED"    . (:foreground "#E35DBF" :weight bold))
        ("BLOCKED"    . (:foreground "White"   :weight bold))
        ("TODELEGATE" . (:foreground "White"   :weight bold))
        ("DELEGATED"  . (:foreground "pink"    :weight bold))
        ("CANCELED"   . (:foreground "white"   :weight bold))
        ("TICKLE"     . (:foreground "White"   :weight bold))
        ("DONE"       . (:foreground "green"   :weight bold))))
#+END_SRC

**** keywords
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; keywords
(setq org-todo-keywords
      '((sequence "TODO(t)"
                  "NEXT(n!)"
                  "STARTED(s!)"
                  "BLOCKED(b@/!)"
                  "TODELEGATE(g@/!)"
                  "DELEGATED(D@/!)"
                  "FOLLOWUP(f@/!)"
                  "TICKLE(T!)"
                  "|"
                  "CANCELLED(c@)"
                  "DONE(d@)")))
#+END_SRC

*** END org-mode
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
) ;; End (after! org
#+END_SRC

** org-super-agenda
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-super-agenda)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; org-super-agenda

(use-package! org-super-agenda
  :after org-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode)

  (setq org-agenda-custom-commands
        '(("o" "Overview"
           ((agenda "" ((org-super-agenda-groups
                         '((:log t)  ; Automatically named "Log"
                           (:name "Schedule"
                            :time-grid t)
                           (:name "Today"
                            :scheduled today)
                           (:habit t)
                           (:name "Due today"
                            :deadline today)
                           (:name "Overdue"
                            :deadline past)
                           (:name "Due soon"
                            :deadline future)
                           (:name "Tickle"
                            :deadline future)
                           (:name "Unimportant"
                            :todo ("BLOCKED" "TODELEGATE" "DELEGATED" "CANCELED"
                                   :order 100)
                            (:name "Waiting..."
                             :todo "WAITING"
                             :order 98)
                            (:name "Scheduled earlier"
                             :scheduled past))))))))
          ("g" "group"
           ((agenda "" ((org-agenda-spam 'week)
                        (org-super-agenda-groups
                         '((:auto-category t))
                         )))))

          ("u" "Super view"
           ((agenda "" ((org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t)))))
            (todo "" ((org-agenda-overriding-header "Projects")
                      (org-super-agenda-groups
                       '((:name none  ; Disable super group header
                          :children todo)
                         (:discard (:anything t)))))))))))
#+END_SRC

** org-pandoc
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-pandoc-import             :recipe (:host github
                                                 :repo "tecosaur/org-pandoc-import"
                                                 :files ("*.el" "filters" "preprocessors")))
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; org-pandoc
(use-package! org-pandoc-import
  :after org)
#+END_SRC

** 0rg publish functions

#+BEGIN_SRC emacs-lisp :tangle functions.el
;;;;;; publish functions

(defun marty/publish (a b c)
  (setq org-export-with-toc t)
  (org-html-publish-to-html a b c)
  (setq org-export-with-toc nil)
  (org-ascii-publish-to-ascii a b c))
#+END_SRC

** org-roam
*** org-roam-ui
**** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-roam-ui                   :recipe (:host github
                                                 :repo "org-roam/org-roam-ui"
                                                 :files ("*.el" "out")))
#+END_SRC

**** code
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;;;;; org-roam-ui
(use-package! org-roam-ui
  :after org-roam)

#+END_SRC

*** org-roam capture templates
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Org Roam Capture Templates
(after! org-roam
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "** %<%H:%M> Starting Notes %?"
           :if-new (file+olp "%<%Y-%m-%d>.org" ("Journal"))
           :empty-lines-after 1 )
          ("t" "Tasks" entry "** TODO %? "
           :if-new (file+olp "%<%Y-%m-%d>.org" ("Tasks"))
           :empty-lines-after 1 )
          ("r" "Rackspace" entry "** %<%H:%M> %?"
           :if-new (file+olp "%<%Y-%m-%d>.org" ("Rackspace"))
           :empty-lines-after 1)
          ("j" "Journal" entry "** %<%H:%M> %?"
           :if-new (file+olp "%<%Y-%m-%d>.org" ("Journal"))
           :empty-lines-after 1)))

  (setq org-roam-capture-templates
        '(("d" "default" plain
           (file "~/.config/doom/templates/roam-templates/default-capture-entry.org")
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)
          ("t" "tipjar" plain
           (file "~/.config/doom/templates/roam-templates/tipjar-entry.org")
           :if-new (file+head "TipJar/${slug}.org" "#+TITLE: ${title}\n#+filetags: tipjar\n")
           :unnarrowed t)
          )))
#+END_SRC

*** Roam Functions

#+BEGIN_SRC emacs-lisp :tangle functions.el
;;;;; Roam Daily Functions
(defun marty/org-roam-dailies-graphicslink ()
  " Set the Graphics Link to Today in the Pictures folder that maid pushes to."
  (interactive)
  (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 5 7)))
         (day   (string-to-number (substring (buffer-name) 8 10)))
         (datim (encode-time 0 0 0 day month year)))
    (format-time-string "[[/home/marty/Nextcloud/Pictures/2020 - 2029/%Y/%0m/Daily/%d][Graphics Link]]" datim)))

(defun marty/org-roam-dailies-title ()
  (interactive)
  (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 5 7)))
         (day   (string-to-number (substring (buffer-name) 8 10)))
         (datim (encode-time 0 0 0 day month year)))
    (format-time-string "%A, %B %d %Y" datim)))

(defun marty/org-roam-dailies-todo-schedule ()
  " Set the Date for the todo's in the dailies template "
  (interactive)
  (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 5 7)))
         (day   (string-to-number (substring (buffer-name) 8 10)))
         (datim (encode-time 0 0 0 day month year)))
    (format-time-string "SCHEDULED: [%Y-%m-%d %a 10:00]" datim)))

(defun marty/org-roam-dailies-todo-deadline ()
  " Set the Date for the todo's in the dailies template "
  (interactive)
  (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 5 7)))
         (day   (string-to-number (substring (buffer-name) 8 10)))
         (datim (encode-time 0 0 0 day month year)))
    (format-time-string "DEADLINE: [%Y-%m-%d %a 20:00]" datim)))
#+END_SRC

*** Roam Extra (TODO)
**** Functions
Well now this is working well
#+BEGIN_SRC emacs-lisp :tangle functions.el

(after! org-roam
  (defun roam-extra:get-filetags ()
    (split-string (or (org-roam-get-keyword "filetags") "")))

  (defun roam-extra:add-filetag (tag)
    (let* ((new-tags (cons tag (roam-extra:get-filetags)))
           (new-tags-str (combine-and-quote-strings new-tags)))
      (org-roam-set-keyword "filetags" new-tags-str)))

  (defun roam-extra:del-filetag (tag)
    (let* ((new-tags (seq-difference (roam-extra:get-filetags) `(,tag)))
           (new-tags-str (combine-and-quote-strings new-tags)))
      (org-roam-set-keyword "filetags" new-tags-str)))

  (defun roam-extra:todo-p ()
    "Return non-nil if current buffer has any TODO entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
    (org-element-map
        (org-element-parse-buffer 'headline)
        'headline
      (lambda (h)
        (eq (org-element-property :todo-type h)
            'todo))
      nil 'first-match))

  (defun roam-extra:update-todo-tag ()
    "Update TODO tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (org-roam-file-p))
      (org-with-point-at 1
        (let* ((tags (roam-extra:get-filetags))
               (is-todo (roam-extra:todo-p)))
          (cond ((and is-todo (not (seq-contains-p tags "todo")))
                 (roam-extra:add-filetag "todo"))
                ((and (not is-todo) (seq-contains-p tags "todo"))
                 (roam-extra:del-filetag "todo")))))))

  (defun roam-extra:todo-files ()
    "Return a list of roam files containing todo tag."
    (org-roam-db-sync)
    (let ((todo-nodes (seq-filter (lambda (n)
                                    (seq-contains-p (org-roam-node-tags n) "todo"))
                                  (org-roam-node-list))))
      (seq-uniq (seq-map #'org-roam-node-file todo-nodes))))

  (defun roam-extra:update-todo-files (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (roam-extra:todo-files))))
#+END_SRC

#+RESULTS:
: roam-extra:update-todo-files

**** Hooks and advise
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
(after! org-roam
  (add-hook 'find-file-hook #'roam-extra:update-todo-tag)
  (add-hook 'before-save-hook #'roam-extra:update-todo-tag)
  (advice-add 'org-agenda :before #'roam-extra:update-todo-files))
#+END_SRC

**** Add Properties data
#+BEGIN_SRC emacs-lisp
(defun marty/add-other-auto-props-to-org-roam-properties ()
  ;; if the file already exists, don't do anything, otherwise...
  (unless (file-exists-p (buffer-file-name))
    ;; if there's also a CREATION_TIME property, don't modify it
    (unless (org-find-property "CREATION_TIME")
      ;; otherwise, add a Unix epoch timestamp for CREATION_TIME prop
      ;; (this is what "%s" does - see http://doc.endlessparentheses.com/Fun/format-time-string )
      (org-roam-add-property
       (format-time-string "%s"
                           (nth 5
                                (file-attributes (buffer-file-name))))
       "CREATION_TIME"))
    (unless (org-find-property "ORG_CREATION_TIME")
      (org-roam-add-property
       (format-time-string "[%Y-%m-%d %a %H:%M:%S]"
                           (nth 5
                                (file-attributes (buffer-file-name))))
       "ORG_CREATION_TIME"))
    ;; similarly for AUTHOR and MAIL properties
    (unless (org-find-property "AUTHOR")
      (org-roam-add-property user-full-name "AUTHOR"))
    (unless (org-find-property "MAIL")
      (org-roam-add-property user-mail-address "MAIL"))
    ;; also add the latitude and longitude
    (unless (org-find-property "LAT_LONG")
      ;; recheck location:
      (marty/get-lat-long-from-ipinfo)
      (org-roam-add-property (concat (number-to-string calendar-latitude) "," (number-to-string calendar-longitude)) "LAT-LONG"))))

;; hook to be run whenever an org-roam capture completes
(add-hook 'org-roam-capture-new-node-hook #'marty/add-other-auto-props-to-org-roam-properties)

;; function to find latitude & longitude
;;                      (requires curl to be installed on system)
(setq calendar-latitude 0)
(setq calendar-longitude 0)
(defun marty/get-lat-long-from-ipinfo ()
  (let*
      ((latlong (substring
                 (shell-command-to-string "curl -s 'https://ipinfo.io/loc'")
                   0 -1))
       (latlong-list (split-string latlong ",")))
    (setq calendar-latitude (string-to-number (car latlong-list)))
    (setq calendar-longitude (string-to-number (cadr latlong-list)))))
#+END_SRC

#+RESULTS:
: marty/get-lat-long-from-ipinfo

*** Popup Rules
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;;;;; Org Roam
(after! org-roam
  (setq +org-roam-open-buffer-on-find-file nil)
  (set-popup-rules!
    `((,(regexp-quote org-roam-buffer) ; persistent org-roam buffer
       :side right :width .12 :height .5 :ttl nil :modeline nil :quit nil :slot 1)
      ("^\\*org-roam: " ; node dedicated org-roam buffer
       :side right :width .12 :height .5 :ttl nil :modeline nil :quit nil :slot 2))))
#+END_SRC

** org-transclusion
*** Package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-transclusion              :recipe (:host github
                                                 :repo "nobiot/org-transclusion"
                                                 :branch "main"
                                                 :files ("*.el")))
#+END_SRC
*** Code
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
(use-package! org-transclusion
  :defer
  :after org
  :init
  (map!
   :map global-map "<f12>" #'org-transclusion-add
   :leader
   :prefix "n"
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+END_SRC

#+RESULTS:
: org-transclusion-mode

** org-edna
http://www.nongnu.org/org-edna-el
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-edna)
#+END_SRC
*** Code
#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; Always necessary
(after! org
  (org-edna-mode))
#+END_SRC

** TSfile Links

This code is at the end of org-mode.el and is self contained of sorts.. ts files
uses memacs file index to create a file of locations of files in my
~/Nextcloud/Documents/File Cabinet. These are then referenced in org files using
the files.org file to act as a database to allow for relocation of the files
after reference

#+BEGIN_SRC emacs-lisp :tangle org-mode.el
;; TSfile Links

(defvar memacs-root "~/Nextcloud/Notes/memacs/")

(defvar memacs-file-pattern "files.org")

;; by John Kitchin
(defun my-handle-tsfile-link (querystring)
  ;; get a list of hits
  (let ((queryresults (split-string
                       (s-trim
                        (shell-command-to-string
                         (concat
                          "grep \""
                          querystring
                          "\" "
                          (concat memacs-root memacs-file-pattern))))
                       "\n" t)))
    ;; check length of list (number of lines)
    (cond
     ((= 0 (length queryresults))
      ;; edge case: empty query result
      (message "Sorry, no results found for query: %s" querystring))
     (t
      (with-temp-buffer
        (insert (if (= 1 (length queryresults))
                    (car queryresults)
                  (completing-read "Choose: " queryresults)))
        (org-mode)
        (goto-char (point-min))
        (org-next-link)
        (org-open-at-point "file:"))))))

(after! org
  (org-link-set-parameters
   "tsfile"
   :follow (lambda (path) (my-handle-tsfile-link path))
   :help-echo "Opens the linked file with your default application")
  )

(defun marty/dired-copy-filename-as-tsfile-link ()
  "Copy current file name with its basename as [[tsfile:<basename>]] custom org-mode link."
  (interactive)
  (dired-copy-filename-as-kill) ;; current file name to kill ring
  (let* ((filename (current-kill 0))) ;; get topmost kill ring element
    (kill-new (concat "[[tsfile:" filename "]]")) ;; write back new/modified kill ring element
    )
  )
#+END_SRC
** LOAD ORG
#+begin_src emacs-lisp
;; ORG
(load! "org-mode.el")
#+end_src
* CALENDAR
** org-caldav
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-caldav)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; org-caldav

(use-package! org-caldav
  :after org
  :init
  ;; This is the sync on close function; it also prompts for save after syncing so
  ;; no late changes get lost
  (defun org-caldav-sync-at-close ()
    (org-caldav-sync)
    (save-some-buffers))

  ;; This is the delayed sync function; it waits until emacs has been idle for
  ;; "secs" seconds before syncing.  The delay is important because the caldav-sync
  ;; can take five or ten seconds, which would be painful if it did that right at save.
  ;; This way it just waits until you've been idle for a while to avoid disturbing
  ;; the user.
  (defvar org-caldav-sync-timer nil
    "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
  (defun org-caldav-sync-with-delay (secs)
    (when org-caldav-sync-timer
      (cancel-timer org-caldav-sync-timer))
    (setq org-caldav-sync-timer
          (run-with-idle-timer
           (* 1 secs) nil 'org-caldav-sync)))

  (setq org-caldav-calendars
        '((:calendar-id "personal"
           :files ("~/Nextcloud/Notes/org/Calendar.org")
           :inbox "~/Nextcloud/Notes/Calendars/personal-inbox.org"))
        )

  :config (progn
            (setq org-icalendar-alarm-time 1)
            (setq org-caldav-url "https://nextcloud.dabuke.com/remote.php/dav/calendars/marty")
            (setq org-icalendar-timezone "America/New York")
            (setq org-caldav-save-directory (concat user-emacs-directory ".local/cache/"))
            (setq org-caldav-backup-file (concat user-emacs-directory ".local/cache/"))
            (setq org-icalendar-use-deadline t)
            (setq org-icalendar-include-todo t)
            ;; This ensures all org "deadlines" show up, and show up as due dates
            (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
            ;; This ensures "scheduled" org items show up, and show up as start times
            (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
            ;; Add the delayed save hook with a five minute idle timer
            (add-hook 'after-save-hook
                      (lambda ()
                        (when (eq major-mode 'org-mode)
                          (org-caldav-sync-with-delay 300)))))
  (add-hook 'kill-emacs-hook 'org-caldav-sync-at-close))
#+END_SRC

#+RESULTS:
: t


*** Function to open calendar
#+BEGIN_SRC emacs-lisp :tangle functions.el

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    ;; (cfw:org-create-file-source "Google" "~/.cache/calendar/google.com" "Blue")
    (cfw:org-create-file-source "Tatjana" "~/.cache/calendar/tatjana.org" "Pink")  ; other org source
    ;; (cfw:org-create-file-source "Rackspace" "~/.cache/calendar/rackspace.org" "Red")  ; other org source
    (cfw:org-create-file-source "Next-Personal" "~/Nextcloud/Notes/Calendars/personal.org" "Blue")  ; other org source
    (cfw:org-create-file-source "Next-Birthdays" "~/Nextcloud/Notes/Calendars/contact_birthdays.org" "Brown")  ; other org source
    (cfw:org-create-file-source "Next-org-mode" "~/Nextcloud/Notes/Calendars/org-mode.org" "Brown")  ; other org source
    )))
#+END_SRC

* FUNCTIONS
** Open File Functions
*** Calendar Open
#+BEGIN_SRC emacs-lisp :tangle functions.el
;;;;; Calendar Open

(defun mb/open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")
    (cfw:org-create-file-source "Personal" "~/Nextcloud/Notes/org/Calendar.org" "Blue"))))
#+END_SRC
*** Config and other files

#+BEGIN_SRC emacs-lisp :tangle functions.el
;;;;; Open file Functions

(defun mb/calendar ()
  (interactive) (find-file (concat org-directory "Calendar.org")))

(defun mb/0mobile ()
  (interactive) (find-file (concat org-directory "0mobile.org")))

(defun mb/desktop ()
  (interactive) (find-file (concat org-directory "desktop.org")))

(defun mb/contacts ()
  (interactive) (find-file (concat org-directory "contacts.org")))

(defun mb/Tasks ()
  (interactive) (find-file (concat org-directory "Tasks.org")))

(defun mb/Habits ()
  (interactive) (find-file (concat org-directory "Habits.org")))

(defun mb/read-later ()
  (interactive) (find-file (concat org-directory "read-later.org")))

(defun mb/Someday ()
  (interactive) (find-file (concat org-directory "Someday.org")))

(defun mb/TipJar ()
  (interactive) (find-file (concat org-directory "TipJar/index.org")))

(defun mb/base-keybinding ()
  (interactive) (find-file "~/.config/doom/keybindings.el"))

(defun mb/base-config ()
  (interactive) (find-file "~/.config/doom/config.el"))

(defun mb/org-config ()
  (interactive) (find-file "~/.config/doom/config.org"))
#+END_SRC

** Mutt Functions
#+BEGIN_SRC emacs-lisp :tangle functions.el

;;;;;; Open Mutt Message

(defun mutt-open-message (message-id)
  "In neomutt, open the nmail with the the given Message-ID"
  (let*
      ((message-id
        (replace-regexp-in-string "^/*" "" message-id))
       (mail-file
        ;; notmuch
        (replace-regexp-in-string
         "\n$" "" (shell-command-to-string
                   (format "notmuch search --output=files id:%s" message-id))))
       (mail-box (replace-regexp-in-string "/home/marty/Mail" "" mail-file))
       (mail-dir (replace-regexp-in-string "/\\(cur\\|new\\|tmp\\)/$" ""
                                           (file-name-directory mail-box)))
       (mutt-keystrokes
        (format "macro index - l~i%s; push -\\nb\\n" (shell-quote-argument message-id)))
       (mutt-command (format "neomutt -f '=%s' -e '%s'" mail-dir  mutt-keystrokes)))
    ;; MU
    ;;         (replace-regexp-in-string
    ;;          "\n$" "" (shell-command-to-string
    ;;                    (format "mu find -u i:%s --fields 'm'" message-id ))))
    ;;        (mutt-keystrokes
    ;;         (format "macro index - l~i%s; push -\\nb\\n" (shell-quote-argument message-id)))
    ;;         (mutt-command (format "neomutt -f '=%s' -e '%s'" mail-file  mutt-keystrokes)))

    (message "Launching neomutt for message %s" message-id)
    (message " %s" mutt-command)
    (call-process "setsid" nil nil nil
                  "-f" "termite" "-e"
                  mutt-command)))

#+END_SRC

** PROT Functions
#+BEGIN_SRC emacs-lisp :tangle functions.el

;;;; PROT Functions

(defvar prot-common-url-regexp
  (concat
   "\\b\\(\\(www\\.\\|\\(s?https?\\|ftp\\|file\\|gopher\\|"
   "nntp\\|news\\|telnet\\|wais\\|mailto\\|info\\):\\)"
   "\\(//[-a-z0-9_.]+:[0-9]*\\)?"
   (let ((chars "-a-z0-9_=#$@~%&*+\\/[:word:]")
	       (punct "!?:;.,"))
     (concat
      "\\(?:"
      ;; Match paired parentheses, e.g. in Wikipedia URLs:
      ;; http://thread.gmane.org/47B4E3B2.3050402@gmail.com
      "[" chars punct "]+" "(" "[" chars punct "]+" ")"
      "\\(?:" "[" chars punct "]+" "[" chars "]" "\\)?"
      "\\|"
      "[" chars punct "]+" "[" chars "]"
      "\\)"))
   "\\)")
  "Regular expression that matches URLs.
Copy of variable `browse-url-button-regexp'.")


(defun prot-diff-buffer-dwim (&optional arg)
  "Diff buffer with its file's last saved state, or run `vc-diff'.
With optional prefix ARG (\\[universal-argument]) enable
highlighting of word-wise changes (local to the current buffer)."
  (interactive "P")
  (let ((buf))
    (if (buffer-modified-p)
        (progn
          (diff-buffer-with-file (current-buffer))
          (setq buf "*Diff*"))
      (vc-diff)
      (setq buf "*vc-diff*"))
    (when arg
      (with-current-buffer (get-buffer buf)
        (unless diff-refine
          (setq-local diff-refine 'font-lock))))))

(defvar-local prot-diff--refine-diff-state 0
  "Current state of `prot-diff-refine-dwim'.")

;;;###autoload
(defun prot-simple-rename-file-and-buffer (name)
  "Apply NAME to current file and rename its buffer.
Do not try to make a new directory or anything fancy."
  (interactive
   (list (read-string "Rename current file: " (buffer-file-name))))
  (let ((file (buffer-file-name)))
    (if (vc-registered file)
        (vc-rename-file file name)
      (rename-file file name))
    (set-visited-file-name name t t)))


;;;###autoload
(defun prot-search-occur-urls ()
  "Produce buttonised list of all URLs in the current buffer."
  (interactive)
  (let ((buf-name (format "*links in <%s>*" (buffer-name))))
    (add-hook 'occur-hook #'goto-address-mode)
    (occur-1 prot-common-url-regexp "\\&" (list (current-buffer)) buf-name)
    (remove-hook 'occur-hook #'goto-address-mode)))
#+END_SRC


** Load functions File
#+BEGIN_SRC emacs-lisp
;;;; Load Functions.el

(load! "functions.el")

#+END_SRC
* MU4E
** mu4e functions
#+BEGIN_SRC emacs-lisp :tangle functions.el
;;;;;; MU4E

(defvar marty-mu4e/mu4e-compose-signed-p t)
(defvar marty-mu4e/mu4e-compose-signed-and-crypted-p nil)

(defun marty-mu4e/mu4e-compose-maybe-signed-and-crypted ()
  "Maybe sign or encrypt+sign message.
Message is signed or encrypted+signed when replying to a signed or encrypted
message, respectively.
Alternatively, message is signed or encrypted+signed if
`ambrevar/mu4e-compose-signed-p' or `ambrevar/mu4e-compose-signed-and-crypted-p' is
non-nil, respectively.
This function is suitable for `mu4e-compose-mode-hook'."
  (let ((msg mu4e-compose-parent-message))
    (cond
     ((or marty-mu4e/mu4e-compose-signed-and-crypted-p
          (and msg (member 'encrypted (mu4e-message-field msg :flags))))
      (mml-secure-message-sign-encrypt))
     ((or marty-mu4e/mu4e-compose-signed-p
          (and msg (member 'signed (mu4e-message-field msg :flags))))
      (mml-secure-message-sign-pgpmime)))))

;; Follow up quick key

(defun marty/capture-mail-follow-up (msg)
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture "ma"))

(defun marty/capture-mail-read-later (msg)
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture "mr"))

;; End MU4E
#+END_SRC
** Experimental test from Henric to prefer text over html and rich
#+BEGIN_SRC emacs-lisp

(with-eval-after-load "mm-decode"
  (add-to-list 'mm-discouraged-alternatives "text/html")
  (add-to-list 'mm-discouraged-alternatives "text/richtext"))

#+END_SRC

** Start Mu4e
*** After Wrap
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
(after! mu4e
#+END_SRC
*** Header
**** Header Action
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Header Actions

(add-to-list 'mu4e-headers-actions
             '("follow up" . marty/capture-mail-follow-up) t)

(add-to-list 'mu4e-view-actions
             '("follow up" . marty/capture-mail-follow-up) t)

(add-to-list 'mu4e-headers-actions
             '("read later" . marty/capture-mail-read-later) t)

(add-to-list 'mu4e-view-actions '("ytag message" . mu4e-action-retag-message) t)
#+END_SRC
**** Header Settings
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Header

(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

#+END_SRC

**** Header Info
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Info

(add-to-list 'mu4e-header-info-custom
             '(:full-mailing-list .
               ( :name "Mailing-list"                     ;; long name, as seen in the message-view
                 :shortname "Mail List"                    ;; short name, as seen in the headers view
                 :help "Full name for mailing list" ;; tooltip
                 :function (lambda (msg)
                             (or (mu4e-message-field msg :mailing-list) "")))))

(add-to-list 'mu4e-header-info-custom
             '(:xlabel .
               ( :name "X-Label or Tag"                 ;; long name, as seen in the message-view
                 :shortname "X-Label"        ;; short name, as seen in the headers view
                 :help "Maildir X-Label"   ;; tooltip
                 :function (lambda (msg)
                             (or (mu4e-message-field msg :X-Label) "")))))
#+END_SRC

**** Header Fields
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; fields

(setq mu4e-headers-fields '(
                            (:date . 18)    ;; alternatively, use :human-date
                            (:flags . 7)
                            (:from-or-to . 40)
                            (:full-mailing-list . 40)
                            (:tags . 15)           ;;  X-label
                            (:size . 10)
                            (:thread-subject)))    ;;  :subject or thread-subject

(setq mu4e-view-fields '(:date
                         :from
                         :to
                         :cc
                         :bcc
                         :subject
                         :flags
                         :maildir
                         :full-mailing-list
                         :size
                         :signature
                         :xlabel
                         :tags
                         :decryption
                         :attachments))
#+END_SRC

*** Config
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; (config)

(setq mu4e-action-tags-header "X-Label")
(setq mu4e-attachment-dir "/home/marty/Downloads/Mail")
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-confirm-quit t)
(setq mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a")
(setq mu4e-update-interval  300)

;; Set from Context  these are default

(setq mu4e-drafts-folder nil)                      ;; set from context
(setq mu4e-get-mail-command nil)                   ;; set from context
(setq mu4e-sent-folder nil)                        ;; set from context
(setq mu4e-trash-folder nil)                       ;; set from context

;; PGP

(setq mml-secure-openpgp-encrypt-to-self t)
(setq mml-secure-openpgp-sign-with-sender t)

;; Send Mail

(setq message-send-mail-function 'message-send-mail-with-sendmail)
(setq message-sendmail-extra-arguments '("--read-envelope-from"))
(setq message-sendmail-f-is-evil t)
(setq mu4e-sent-messages-behavior 'sent)
(setq send-mail-function #'smtpmail-send-it)
(setq sendmail-program "/usr/bin/msmtp")

;; VIEW Email

(setq mu4e-headers-include-related t)
(setq mu4e-headers-precise-alignment t)
(setq mu4e-thread-folding-default-view 'unfolded)
#+END_SRC
*** Bookmarks
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; bookmarks

(setq mu4e-bookmarks
      '(
        (:name "All Inboxes"
         ;; :query "maildir:/Dabuke/INBOX OR maildir:/Gmail/INBOX OR maildir:/Rackspace/INBOX OR maildir:/RHH/INBOX"
         :query "maildir:/Dabuke/INBOX OR maildir:/Gmail/INBOX OR maildir:/RHH/INBOX"
         :key ?i)
        (:name "Unread messages"
         :query "flag:unread AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
         :key ?u)
        (:name "Unread Dabuke"
         :query "flag:unread AND NOT flag:trashed AND maildir:/Dabuke/"
         :key ?d)
        (:name "Today's messages"
         :query "date:today..now AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
         :key ?t)
        (:name "Yesterday and today messages"
         :query "date:1d..now AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
         :key ?y)
        (:name "Last 7 days"
         :query "date:7d..now AND NOT flag:trashed AND NOT maildir:/Gmail/[Gmail].Spam"
         :key ?w)
        (:name "Messages with images last 30 days"
         :query "date:30d..now mime:image/*"
         :key ?p)
        (:name "Messages with images All"
         :query "mime:image/*"
         :key ?P)
        (:name "Messages with attachments last 30 days"
         :query "date:30d..now flag:attach"
         :key ?a)
        (:name "Messages with attachments All"
         :query "flag:attach"
         :key ?A)
        ))
#+END_SRC
*** Compose
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Compose

(setq mu4e-compose-dont-reply-to-self t)
(setq mu4e-compose-signature nil)        ;; Pulled from Contexts so Null as default

;; compose mode hook

(add-hook 'mu4e-compose-mode-hook
          #'(lambda ()
              "My Setting for Composing Messages"
              (save-excursion (message-add-header "X-Mailer: mu4e/Linux"))
              (save-excursion (message-add-header "X-PGP-KEY-Fingerprint: 7F6C A60C 06C2 4811 FA1C A2BC 2EBC 5E32 FEE3 0AD4"))
              (save-excursion (message-add-header "X-PGP-Key-ID: 0x090F6CEA"))
              (save-excursion (message-add-header "X-PGP-Key: https://keybase.io/mbuchaus/key.asc "))
              (marty-mu4e/mu4e-compose-maybe-signed-and-crypted)
              (set-fill-column 72)
              (turn-on-auto-fill)))


(setq mu4e-compose-hidden-headers '("^Face:"
                                    "^X-Face:"
                                    "^Openpgp:"
                                    "^X-Draft-From:"
                                    "^X-Mailer:"
                                    "^User-agent:"))
#+END_SRC

*** Encryption
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Encryption

(setq epg-user-id "0x090F6CEA")
(setq mu4e-decryption-policy t)
(setq mu4e-compose-crypto-reply-plain-policy 'sign)
(setq mml-secure-openpgp-encrypt-to-self t)
(setq mml-secure-openpgp-sign-with-sender  t)
#+END_SRC

*** contacts add

#+END_SRC
*** Contexts
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Contexts

(setq mu4e-compose-context-policy 'ask-if-none)
  (setq mu4e-context-policy 'ask-if-none)
  (setq mu4e-contexts
        `(
#+END_SRC

**** Dabuke
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Dabuke
,(make-mu4e-context
  :name "Dabuke"
  :enter-func (lambda () (mu4e-message "Switch to the Dabuke context"))
  :leave-func (lambda () (mu4e-message "Leaving Dabuke context"))
  :vars '((user-mail-address      . "marty@dabuke.com")
          (mu4e-get-mail-command  . "mbsync Dabuke")
          (mu4e-refile-folder     . "/Dabuke/Archive")
          (mu4e-trash-folder      . "/Dabuke/Trash")
          (mu4e-drafts-folder     . "/Dabuke/Drafts")
          (mu4e-sent-folder       . "/Dabuke/Sent")
          (user-full-name         . "Marty Buchaus")
          (mu4e-maildir-shortcuts . ((:maildir "/Dabuke/Archive"              :key ?a)
                                     (:maildir "/Dabuke/Drafts"               :key ?d)
                                     (:maildir "/Dabuke/INBOX"                :key ?i)
                                     (:maildir "/Dabuke/Spam"                 :key ?S)
                                     (:maildir "/Dabuke/Junk"                 :key ?j)
                                     (:maildir "/Dabuke/Lists.Doom"           :key ?D)
                                     (:maildir "/Dabuke/Lists.Emacs"          :key ?e)
                                     (:maildir "/Dabuke/Lists.Linode"         :key ?l)
                                     (:maildir "/Dabuke/Lists.Mutt"           :key ?M)
                                     (:maildir "/Dabuke/Lists.Root"           :key ?r)
                                     (:maildir "/Dabuke/Lists.Spacemacs"      :key ?m)
                                     (:maildir "/Dabuke/Lists.nextcloud"      :key ?N)
                                     (:maildir "/Dabuke/Lists.ofmasons"       :key ?O)
                                     (:maildir "/Dabuke/Lists.passwordstore"  :key ?W)
                                     (:maildir "/Dabuke/Lists.qutebrowser"    :key ?q)
                                     (:maildir "/Dabuke/Queue"                :key ?Q)
                                     (:maildir "/Dabuke/SBL"                  :key ?b)
                                     (:maildir "/Dabuke/Sent"                 :key ?s)
                                     (:maildir "/Dabuke/TrainGood"            :key ?G)
                                     (:maildir "/Dabuke/TrainSpam"            :key ?B)
                                     (:maildir "/Dabuke/Trash"                :key ?T)
                                     (:maildir "/Dabuke/zillow"               :key ?z)))
          (message-sendmail-extra-arguments . ("--account=Dabuke"))
          (mu4e-compose-signature .
                                  (concat
                                   "William Marty Buchaus Jr\n"
                                   "A person is smart. People are dumb, panicky, dangerous animals and you know it. -k MIB\n"
                                   "Meet on the level Act by the Plumb and Part upon the Square  AF&AM 832\n"
                                   "https://snuffy.org\n"))))
#+END_SRC

**** Lets Earn Money
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Lets Earn Money
,(make-mu4e-context
  :name "letsEarnMoney"
  :enter-func (lambda () (mu4e-message "Switch to the letsEarnMoney context"))
  :leave-func (lambda () (mu4e-message "Leaving letsEarnMoney context"))
  :vars '((user-mail-address      . "marty@letsearnmoney.com")
          (mu4e-get-mail-command  . "mbsync letsEarnMoney")
          (mu4e-refile-folder     . "/letsEarnMoney/Archive")
          (mu4e-trash-folder      . "/letsEarnMoney/Trash")
          (mu4e-drafts-folder     . "/letsEarnMoney/Drafts")
          (mu4e-sent-folder       . "/letsEarnMoney/Sent")
          (user-full-name         . "Marty Buchaus")
          (mu4e-maildir-shortcuts . ((:maildir "/letsEarnMoney/Archive"              :key ?a)
                                     (:maildir "/letsEarnMoney/Drafts"               :key ?d)
                                     (:maildir "/letsEarnMoney/INBOX"                :key ?i)
                                     (:maildir "/letsEarnMoney/Junk"                 :key ?j)
                                     (:maildir "/letsEarnMoney/Queue"                :key ?Q)
                                     (:maildir "/letsEarnMoney/SBL"                  :key ?b)
                                     (:maildir "/letsEarnMoney/Sent"                 :key ?s)
                                     (:maildir "/letsEarnMoney/Spam"                 :key ?S)
                                     (:maildir "/letsEarnMoney/TrainGood"            :key ?G)
                                     (:maildir "/letsEarnMoney/TrainSpam"            :key ?B)
                                     (:maildir "/letsEarnMoney/Trash"                :key ?T)))
          (message-sendmail-extra-arguments . ("--account=letsEarnMoney"))
          (mu4e-compose-signature .
                                  (concat
                                   "William Marty Buchaus Jr\n"
                                   "https://www.letsearnmoney.com\n"))))
#+END_SRC

**** Oak Forest Masons
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; OFMasons
,(make-mu4e-context
  :name "OFMasons"
  :enter-func (lambda () (mu4e-message "Switch to the OFMasons context"))
  :leave-func (lambda () (mu4e-message "Leaving OFMasons context"))
  :vars '((user-mail-address      . "marty@ofmasons.com")
          (mu4e-get-mail-command  . "mbsync OFMasons")
          (mu4e-refile-folder     . "/OFMasons/Archive")
          (mu4e-trash-folder      . "/OFMasons/Trash")
          (mu4e-drafts-folder     . "/OFMasons/Drafts")
          (mu4e-sent-folder       . "/OFMasons/Sent")
          (user-full-name         . "Marty Buchaus")
          (mu4e-maildir-shortcuts . ((:maildir "/OFMasons/Archive"              :key ?a)
                                     (:maildir "/OFMasons/Drafts"               :key ?d)
                                     (:maildir "/OFMasons/INBOX"                :key ?i)
                                     (:maildir "/OFMasons/Junk"                 :key ?j)
                                     (:maildir "/OFMasons/Queue"                :key ?Q)
                                     (:maildir "/OFMasons/SBL"                  :key ?b)
                                     (:maildir "/OFMasons/Sent"                 :key ?s)
                                     (:maildir "/OFMasons/Spam"                 :key ?S)
                                     (:maildir "/OFMasons/TrainGood"            :key ?G)
                                     (:maildir "/OFMasons/TrainSpam"            :key ?B)
                                     (:maildir "/OFMasons/Trash"                :key ?T)))
          (message-sendmail-extra-arguments . ("--account=OFMasons"))
          (mu4e-compose-signature .
                                  (concat
                                   "William Marty Buchaus Jr\n"
                                   "Meet on the level Act by the Plumb and Part upon the Square  AF&AM 832\n"
                                   "https://www.ofmasons.com\n"))))
#+END_SRC
**** RadHits
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Radhits
,(make-mu4e-context
  :name "TRadhits"
  :enter-func (lambda () (mu4e-message "Switch to the Rad Hits context"))
  :leave-func (lambda () (mu4e-message "Leaving Rad Hits context"))
  :vars '((user-mail-address       . "marty@radhits.net")
          (mu4e-get-mail-command   . "mbsync Radhits")
          (mu4e-trash-folder       . "/Radhits/Trash")
          (mu4e-refile-folder      . "/Radhits/Archive")
          (mu4e-drafts-folder      . "/Radhits/Drafts")
          (mu4e-sent-folder        . "/Radhits/Sent")
          (user-full-name          . "Marty Buchaus")
          (mu4e-maildir-shortcuts  . ((:maildir "/Radhits/INBOX"    :key ?i)
                                      (:maildir "/Radhits/Archive"  :key ?a)
                                      (:maildir "/Radhits/Trash"    :key ?T)
                                      (:maildir "/Radhits/Sent"     :key ?s)))
          (message-sendmail-extra-arguments . ("--account=Radhits"))
          (mu4e-compose-signature .
                                  (concat
                                   "Marty Buchaus\n"
                                   "Meet on the Level Act by the Plumb and Part upon the Square\n"
                                   "mobile: 210-763-4052\n"))))
#+END_SRC
**** Red Earth Group
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; RedEarth Group Inc
,(make-mu4e-context
  :name "ERedEarthgroupinc"
  :enter-func (lambda () (mu4e-message "Switch to the Red Earth Group context"))
  :leave-func (lambda () (mu4e-message "Leaving Red Earth Group context"))
  :vars '((user-mail-address       . "marty@redearthgroupinc.com")
          (mu4e-get-mail-command   . "mbsync RedEarth")
          (mu4e-trash-folder       . "/RedEarth/Trash")
          (mu4e-refile-folder      . "/RedEarth/Archive")
          (mu4e-drafts-folder      . "/RedEarth/Drafts")
          (mu4e-sent-folder        . "/RedEarth/Sent")
          (user-full-name          . "Marty Buchaus")
          (mu4e-maildir-shortcuts  . ((:maildir "/RedEarth/INBOX"      :key ?i)
                                      (:maildir "/RedEarth/Archive"    :key ?a)
                                      (:maildir "/RedEarth/Drafts"     :key ?d)
                                      (:maildir "/RedEarth/Trash"      :key ?T)
                                      (:maildir "/REdEarth/TrainGood"  :key ?G)
                                      (:maildir "/REdEarth/TrainSpam"  :key ?B)
                                      (:maildir "/REdEarth/JUnk"       :key ?S)
                                      (:maildir "/RedEarth/Sent"       :key ?s)))
          (message-sendmail-extra-arguments . ("--account=RedEarth"))
          (mu4e-compose-signature .
                                  (concat
                                   "Marty Buchaus\n"
                                   "Meet on the Level Act by the Plumb and Part upon the Square\n"
                                   "mobile: 210-763-4052\n"))))
#+END_SRC
**** Red Earth Construction Florida
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; RE Construction FL
,(make-mu4e-context
  :name "FREconstructionfl"
  :enter-func (lambda () (mu4e-message "Switch to the Red Earth Construction FL context"))
  :leave-func (lambda () (mu4e-message "Leaving Red Earth Construction FL context"))
  :vars '((user-mail-address       . "marty@reconstructionfl.com")
          (mu4e-get-mail-command   . "mbsync reconstructionfl")
          (mu4e-trash-folder       . "/reconstructionfl/Trash")
          (mu4e-refile-folder      . "/reconstructionfl/Archive")
          (mu4e-drafts-folder      . "/reconstructionfl/Drafts")
          (mu4e-sent-folder        . "/reconstructionfl/Sent")
          (user-full-name          . "Marty Buchaus")
          (mu4e-maildir-shortcuts  . ((:maildir "/reconstructionfl/INBOX"      :key ?i)
                                      (:maildir "/reconstructionfl/Archive"    :key ?a)
                                      (:maildir "/reconstructionfl/Drafts"     :key ?d)
                                      (:maildir "/reconstructionfl/TrainGood"  :key ?G)
                                      (:maildir "/reconstructionfl/TrainSpam"  :key ?B)
                                      (:maildir "/reconstructionfl/JUnk"       :key ?S)
                                      (:maildir "/reconstructionfl/Trash"      :key ?T)
                                      (:maildir "/reconstructionfl/Sent"       :key ?s)))
          (message-sendmail-extra-arguments . ("--account=ReConstructionFL"))
          (mu4e-compose-signature .
                                  (concat
                                   "Marty Buchaus\n"
                                   "Meet on the Level Act by the Plumb and Part upon the Square\n"
                                   "mobile: 210-763-4052\n"))))
#+END_SRC
**** Google
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Google
,(make-mu4e-context
  :name "Gmail"
  :enter-func (lambda () (mu4e-message "Switch to the Gmail context"))
  :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
  :vars '((user-mail-address       . "snuffop@gmail.com")
          (mu4e-get-mail-command   . "mbsync Google")
          (mu4e-trash-folder       . "/Google/Trash")
          (mu4e-drafts-folder      . "/Google/Drafts")
          (mu4e-sent-folder        . "/Google/Sent")
          (mu4e-refile-folder      . "/Dabuke/Archive")
          (user-full-name          . "Marty Buchaus")
          (mu4e-maildir-shortcuts  . ((:maildir "/Google/Drafts"            :key ?d)
                                      (:maildir "/Google/INBOX"             :key ?i)
                                      (:maildir "/Google/MMS-SMS"           :key ?M)
                                      (:maildir "/Google/Sent"              :key ?s)
                                      (:maildir "/Google/Trash"             :key ?T)
                                      (:maildir "/Google/Unwanted"          :key ?U)
                                      (:maildir "/Google/[Gmail]/.All Mail" :key ?a)
                                      (:maildir "/Google/[Gmail]/.Spam"     :key ?S)
                                      (:maildir "/Google/queue"             :key ?Q)))
          (message-sendmail-extra-arguments . ("--account=Google"))
          (mu4e-compose-signature .
                                  (concat
                                   "Marty Buchaus\n"
                                   "Meet on the Level Act by the Plumb and Part upon the Square\n"))))
#+END_SRC
**** Real House Hunters
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
;; Real House Hunters
,(make-mu4e-context
  :name "HH"
  :enter-func (lambda () (mu4e-message "Switch to the RHH context"))
  :leave-func (lambda () (mu4e-message "Leaving RHH context"))
  :vars '((user-mail-address      . "wbuchaus@realhousehunters.com")
          (mu4e-get-mail-command  . "mbsync RHH")
          (mu4e-refile-folder     . "/RHH/Archive")
          (mu4e-trash-folder      . "/RHH/Trash")
          (mu4e-drafts-folder     . "/RHH/Drafts")
          (mu4e-sent-folder       . "/RHH/Sent")
          (user-full-name         . "Marty Buchaus")
          (mu4e-maildir-shortcuts . ((:maildir "/RHH/INBOX"   :key ?i)
                                     (:maildir "/RHH/Trash"   :key ?T)
                                     (:maildir "/RHH/Drafts"  :key ?d)
                                     (:maildir "/RHH/Archive" :key ?a)
                                     (:maildir "/RHH/Sent"    :key ?s)))
          (message-sendmail-extra-arguments . ("--account=RHH"))
          (mu4e-compose-signature .
                                  (concat
                                   "Marty Buchaus\n"
                                   "Real House Hunters / Jazney Inc\n"))))
#+END_SRC
**** End Contexts
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
) ;; End List
) ;; End Contexts
#+END_SRC
*** End mu4e.el  after wrap
#+BEGIN_SRC emacs-lisp :tangle mu4e.el
) ;;end after mu4e
#+END_SRC
** Load mu4e.el

#+BEGIN_SRC emacs-lisp
;;;; Load MU4E.el

(load! "mu4e.el")

#+END_SRC
** mu4e column faces
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! mu4e-column-faces)
#+END_SRC
*** Code
#+BEGIN_SRC emacs-lisp
(use-package! mu4e-column-faces
  :after mu4e
  :config (mu4e-column-faces-mode))
#+END_SRC

* KEYBINDING
** Global Bindings
#+BEGIN_SRC emacs-lisp :tangle keybindings.el
;;;; Global keybindings

(define-key! dired-mode-map
  (kbd "C-t") #'marty/dired-copy-filename-as-tsfile-link)

(define-key! help-map
  "h"    #'helpful-at-point)

(map!
 ;; :n "C-:"    #'+spell/correct
 :n "C-,"    #'+spell/next-error)
#+END_SRC

** Leader Bindings

#+BEGIN_SRC emacs-lisp :tangle keybindings.el
;;;;; Leader Keybindings

(map! :leader
      "TAB"  #'evil-switch-to-windows-last-buffer
      "SPC"  #'execute-extended-command
      ;;; <leader> a --- Application
      (:prefix-map ("a" . "Application")
       "m"  #'=mu4e
       "r"  #'ranger
       ;; ORG
       (:prefix-map ("o" . "org")
        "/" #'org-occur-in-agenda-files
        "a" #'org-agenda-list
        "t" #'org-todo-list
        "l" #'org-store-link
        "m" #'org-tags-view
        "o" #'org-agenda
        "s" #'org-search-view
        "t" #'org-todo-list
        (:prefix-map ("C" . "clock/contacts")
         "c"  #'org-clock-cancel
         "g"  #'org-clock-goto
         "i"  #'org-clock-in
         "j"  #'org-clock-jump-to-current-clock
         "o"  #'org-clock-out
         "r"  #'org-resolve-clocks
         "I"  #'org-clock-in-last
         (:prefix-map ("t" . "org-timer")
          "t"  #'org-timer-set-timer
          "p"  #'org-timer-pause-or-continue
          "q"  #'org-timer-stop)))
       ;; Tools
       (:prefix-map ("t" . "tools")
        (:when (featurep! :tools pass)
         (:prefix-map ("p" . "pass")
          "/"  #'ivy-pass
          "c"  #'password-store-edit
          "d"  #'password-store-remove
          "g"  #'password-store-generate
          "i"  #'password-store-insert
          "r"  #'password-store-rename
          "w"  #'password-store-url
          "y"  #'password-store-copy
          "D"  #'password-store-clear
          "I"  #'password-store-init
          (:prefix-map ("o" . "otp")
           "a" #'password-store-otp-append
           "i" #'password-store-otp-insert
           "y" #'password-store-otp-token-copy
           "A" #'password-store-otp-append-from-image
           "Y" #'password-store-otp-uri-copy)))
        (:prefix-map ("t" . "Tramp")
         "C"  #'tramp-cleanup-all-connections
         "B"  #'tramp-cleanup-all-buffers
         "c"  #'tramp-cleanup-this-connection
         "t"  #'counsel-tramp
         "q"  #'counsel-tramp-quit)))

      ;;; <leader> l --- workspace / Layout
      (:when (featurep! :ui workspaces)
       (:prefix-map ("l" . "workspace")
        :desc "Display tab bar"           "SPC" #'+workspace/display
        :desc "Cycle tab bar"             "TAB" #'+workspace/cycle
        :desc "Switch workspace"          "."   #'+workspace/switch-to
        :desc "Switch to last workspace"  "`"   #'+workspace/other
        :desc "Move workspace left"       "<"   #'+workspace/swap-left
        :desc "Move workspace right"      ">"   #'+workspace/swap-right
        :desc "New workspace"             "n"   #'+workspace/new
        :desc "Create named workspace"    "N"   #'+workspace/new-named
        :desc "open workspace from file"  "o"   #'+workspace/load
        :desc "Save workspace to file"    "s"   #'+workspace/save
        :desc "Delete session"            "x"   #'+workspace/kill-session
        :desc "Delete this workspace"     "d"   #'+workspace/delete
        :desc "Rename workspace"          "r"   #'+workspace/rename
        :desc "Switch workspace"          "l"   #'+workspace/switch-to
        :desc "Restore last session"      "R"   #'+workspace/restore-last-session
        :desc "Next workspace"            "]"   #'+workspace/switch-right
        :desc "Previous workspace"        "["   #'+workspace/switch-left
        :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
        :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
        :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
        :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
        :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
        :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
        :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
        :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
        :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
        :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))
      )

#+END_SRC
*** Leader o Open
#+BEGIN_SRC emacs-lisp :tangle keybindings.el
;;;;; <leader> o --- open
(map! :leader
      :prefix "o"
      (:prefix-map ("m" . "MY")
       :desc "0mobile"       "0" #'mb/0mobile
       :desc "Desktop"       "d" #'mb/desktop
       :desc "contacts"      "o" #'mb/contacts
       :desc "Tasks"         "g" #'mb/Tasks
       :desc "Habits"        "h" #'mb/Habits
       :desc "read later"    "l" #'mb/read-later
       :desc "Someday"       "s" #'mb/Someday
       :desc "Tip Jar"       "t" #'mb/TipJar
       (:prefix-map ("c" . "+config")
        :desc "keybindings"  "k"  #'mb/base-keybinding
        :desc "config"       "c"  #'mb/base-config
        :desc "org"          "o"  #'mb/org-config)
       (:prefix-map ("C" . "calendar")
        "c"  #' mb/open-calendar
        "C"  #' mb/calendar
        "s"  #' org-caldav-sync)))
#+END_SRC

*** Mode Maps

#+BEGIN_SRC emacs-lisp :tangle keybindings.el
;;;;; Mode Maps
;;;;;; Override org mode map

(map! :after org
      :map org-mode-map
      :localleader
      :prefix "m"
      "j"  #'org-roam-dailies-capture-today
      "s"  #'org-roam-db-sync
      :prefix "md"
      "p"  #'org-roam-dailies-goto-previous-note
      "n"  #'org-roam-dailies-goto-next-note
      )
#+END_SRC

** Load keybindings.el
#+BEGIN_SRC emacs-lisp
;;;; Leader keys and keybindings

(setq doom-localleader-key ",")

(load! "keybindings.el")
#+END_SRC

* MODULES
** Aggressive indent
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! aggressive-indent)
#+END_SRC
*** code
#+BEGIN_SRC emacs-lisp
;;;;; aggressive indent

(use-package! aggressive-indent
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'clojure-mode-hook    #'aggressive-indent-mode)
  (add-hook 'php-mode-hook #'aggressive-indent-mode)
  (add-hook 'hy-mode-hook #'aggressive-indent-mode))

(global-aggressive-indent-mode 1)

#+END_SRC
** alert
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! alert)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
(use-package alert
  :defer t)
#+END_SRC
** all the icons completion
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! all-the-icons-completion)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
(use-package! all-the-icons-completion)
(all-the-icons-completion-mode)
(add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
#+END_SRC

** auto insert
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! autoinsert)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; autoinsert

(use-package! autoinsert
  :init (progn
          (setq auto-insert-query nil)
          (setq auto-insert-directory "~/.config/doom/templates")
          (add-hook 'find-file-hook 'auto-insert)
          (auto-insert-mode 1))
  :config (progn
            (define-auto-insert "\\.html?$" "default.html")
            ;; (define-auto-insert "\\.org" ["default.org" marty/autoinsert-yas-expand]) ;; disabled in favor of roam capture templates
            (define-auto-insert "\\.sh" ["default.sh" marty/autoinsert-yas-expand])
            (define-auto-insert "\\.el" ["default.el" marty/autoinsert-yas-expand])
            (define-auto-insert "Blorg/snuffy-org/.+\\.org?$" ["snuffy-org.org" marty/autoinsert-yas-expand])
            (define-auto-insert "Sites/snuffy.org/.+\\.org?$" ["snuffy-org-posts.org" marty/autoinsert-yas-expand])
            (define-auto-insert "salt-master.+\\.org?$" ["salt-master.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/[^/]+\\.org?$" ["NSI-Documentation.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/.+/[^/]+\\.org?$" ["NSI-Documentation.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/tipjar/[^/]+\\.org?$" ["NSI-Documentation-tipjar.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/TVA/[^/]+\\.org?$" ["NSI-Documentation-TVA.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/TVA/ScanReports/.+[^/]+\\.org?$" ["NSI-Documentation-TVA-scanreport.org" marty/autoinsert-yas-expand])
            (define-auto-insert "NSI-Documentation/Patching/.+[^/]+\\.org?$" ["NSI-Documentation-Patching-Notes.org" marty/autoinsert-yas-expand])
            (define-auto-insert "masons/[^/].+\\.org?$" ["masonsMeetingMinuets.org" marty/autoinsert-yas-expand])
            (define-auto-insert "daily/[^/].+\\.org?$" ["defaultRoamDaily.org" marty/autoinsert-yas-expand])
            (define-auto-insert "/[0-9]\\{8\\}.org$" ["defaultJournal.org" marty/autoinsert-yas-expand])))

#+END_SRC
*** yas Expand Function
#+BEGIN_SRC emacs-lisp :tangle functions.el
;;;;; Autoinsert yas expand

(defun marty/autoinsert-yas-expand ()
  (let ((template ( buffer-string )))
    (delete-region (point-min) (point-max))
    (yas-expand-snippet template)
    (evil-insert-state)))
#+END_SRC

** I3 Window manager Config
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! i3wm-config-mode              :recipe (:host github
                                                 :repo "Alexander-Miller/i3wm-Config-Mode"))
#+END_SRC

*** Code
#+BEGIN_SRC emacs-lisp
;;;;; i3 Window manager config

(use-package! i3wm-config-mode
  :defer t)

#+END_SRC
** khard
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! khardel)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; Khard

(use-package! khardel
  :defer t)

#+END_SRC
** magit
*** package
Built in!
*** code
#+BEGIN_SRC emacs-lisp
;;;; Magit

(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC

** outshine
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! outshine                      :recipe (:host github
                                                 :repo "alphapapa/outshine"))
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; Outshine

(use-package! outshine
  :defer t)

(after! outshine
  (map! :after outshine
        :map emacs-lisp-mode-map
        "TAB" #'outshine-cycle)
  (add-hook 'emacs-lisp-mode-hook #'outshine-mode)
  (defvar outline-minor-mode-prefix "\M-#"))

#+END_SRC
** paperless
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! paperless)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; Paperless

(use-package paperless
  :init (require 'org-paperless)
  :config (progn
            (custom-set-variables
             '(paperless-capture-directory "~/Nextcloud/Documents/INBOX/")
             '(paperless-root-directory "~/Nextcloud/Documents"))))

(after! paperless
  (map! :leader
        :prefix "a"
        "X"  #'paperless)
  (map! :after paperless
        :localleader
        :mode paperless-mode
        "d"  #'paperless-display
        "r"  #'paperless-rename
        "R"  #'paperless-scan-directories
        "f"  #'paperless-file
        "X"  #'paperless-execute))

#+END_SRC
** saltstack
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! salt-mode)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; Salt Mode

(use-package! salt-mode
  :defer t
  :config
  (add-hook 'salt-mode-hook
            (lambda ()
              (flyspell-mode 1))))
#+END_SRC
** systemd mode
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! systemd)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; Systemd Mode

(use-package! systemd
  :defer t)

(map! :map systemd-mode
      :localleader
      :prefix ("h" . "Help")
      "d" #'systemd-doc-directives
      "o" #'systemd-doc-open)

#+END_SRC
** tramp
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! counsel-tramp)
#+END_SRC

*** Counsel Tramp
#+BEGIN_SRC emacs-lisp
;;;;; Counsel Tramp

(use-package! counsel-tramp
  :after 'tramp
  :config (progn


  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))

  (defvar disable-tramp-backups '(all))
  (setenv "SHELL" "/bin/bash")

  (setq tramp-default-method "scp")
  (setq remote-file-name-inhibit-cache nil)
  (setq tramp-completion-reread-directory-timeout nil)
  (setq helm-tramp-control-master t)

  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp)))

  (add-hook 'counsel-tramp-pre-command-hook
            #'(lambda () (global-aggressive-indent-mode 0)
               (projectile-mode 0)
               (editorconfig-mode 0)))

  (add-hook 'counsel-tramp-quit-hook
            #'(lambda () (global-aggressive-indent-mode 1)
               (projectile-mode 1)
               (editorconfig-mode 1)))
#+END_SRC
*** List of Hosts
#+BEGIN_SRC emacs-lisp
;;;;;; List of Hosts

  (setq counsel-tramp-custom-connections
        '(
          /sshx:appgate:/home/marty
          /sshx:appgate|sudo:appgate:/
          /sshx:archstation.home.snuffy.org:/home/marty
          /sshx:archstation.home.snuffy.org:/
          /sshx:d-proxy-1.iad3.nsi.rackspace.com:/
          /sshx:virtarch.home.snuffy.org:/
          /sshx:virtarch.home.snuffy.org|sudo:virtarch.home.snuffy.org:/
          /sshx:danas.home.snuffy.org:/
          /sshx:daplex.home.snuffy.org:/
          /sshx:daplex.home.snuffy.org|sudo:daplex.home.snuffy.org:/
          /sshx:l1.dabuke.com:/
          /sshx:l1.dabuke.com|sudo.l1.dabuke.com:/
          /sshx:root@l2.dabuke.com:/
          /sshx:marty@l2.dabuke.com:/home/marty/
          /sshx:nextcloud@l2.dabuke.com:/home/nextcloud/
          /sshx:mail.dabuke.com:/
          /sshx:mail.dabuke.com|sudo:mail.dabuke.com:/
          /sshx:macpro.home.snuffy.org:/
          /sshx:macpro.home.snuffy.org|sudo:macpro.home.snuffy.org:/
          /sshx:nextcloud.home.snuffy.org:/
          /sshx:nexthost.home.snuffy.org:/
          /sshx:kali:/
          /sshx:kali|sudo:kali:/
          /sshx:ofmasons@l1.dabuke.com:/
          /sshx:radhits.net:/
          /sshx:radhits.net|sudo:radhits.net:/
          ;; RS
          /sshx:a-backup-1.ord1.nsi.rackspace.com|sudo:a-backup-1.ord1.nsi.rackspace.com:/
          /sshx:a-bastion-1.dfw3.nsi.rackspace.com|sudo:a-bastion-1.dfw3.nsi.rackspace.com:/
          /sshx:a-bastion-1.ord1.nsi.rackspace.com|sudo:a-bastion-1.ord1.nsi.rackspace.com:/
          /sshx:a-bastion-2.ord1.nsi.rackspace.com|sudo:a-bastion-2.ord1.nsi.rackspace.com:/
          /sshx:a-datastore-1.dfw3.nsi.rackspace.com|sudo:a-datastore-1.dfw3.nsi.rackspace.com:/
          /sshx:a-datastore-1.ord1.nsi.rackspace.com|sudo:a-datastore-1.ord1.nsi.rackspace.com:/
          /sshx:a-datastore-2.dfw3.nsi.rackspace.com|sudo:a-datastore-2.dfw3.nsi.rackspace.com:/
          /sshx:a-datastore-2.ord1.nsi.rackspace.com|sudo:a-datastore-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.dfw1.nsi.rackspace.com|sudo:a-docker-netapi-1.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.hkg1.nsi.rackspace.com|sudo:a-docker-netapi-1.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.iad3.nsi.rackspace.com|sudo:a-docker-netapi-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.lon3.nsi.rackspace.com|sudo:a-docker-netapi-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.ord1.nsi.rackspace.com|sudo:a-docker-netapi-1.ord1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-1.syd2.nsi.rackspace.com|sudo:a-docker-netapi-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.dfw1.nsi.rackspace.com|sudo:a-docker-netapi-2.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.hkg1.nsi.rackspace.com|sudo:a-docker-netapi-2.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.iad3.nsi.rackspace.com|sudo:a-docker-netapi-2.iad3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.lon3.nsi.rackspace.com|sudo:a-docker-netapi-2.lon3.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.ord1.nsi.rackspace.com|sudo:a-docker-netapi-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-netapi-2.syd2.nsi.rackspace.com|sudo:a-docker-netapi-2.syd2.nsi.rackspace.com:/
          /sshx:a-docker-registry-2.ord1.nsi.rackspace.com|sudo:a-docker-registry-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.dfw1.nsi.rackspace.com|sudo:a-docker-services-1.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.hkg1.nsi.rackspace.com|sudo:a-docker-services-1.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.iad3.nsi.rackspace.com|sudo:a-docker-services-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-services-1.lon3.nsi.rackspace.com|sudo:a-docker-services-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-services-1.ord1.nsi.rackspace.com|sudo:a-docker-services-1.ord1.nsi.rackspace.com:/
          /sshx:a-docker-services-1.syd2.nsi.rackspace.com|sudo:a-docker-services-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-services-2.dfw1.nsi.rackspace.com|sudo:a-docker-services-2.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-services-2.hkg1.nsi.rackspace.com|sudo:a-docker-services-2.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-services-2.iad3.nsi.rackspace.com|sudo:a-docker-services-2.iad3.nsi.rackspace.com:/
          /sshx:a-docker-services-2.lon3.nsi.rackspace.com|sudo:a-docker-services-2.lon3.nsi.rackspace.com:/
          /sshx:a-docker-services-2.ord1.nsi.rackspace.com|sudo:a-docker-services-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-services-2.syd2.nsi.rackspace.com|sudo:a-docker-services-2.syd2.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.dfw1.nsi.rackspace.com|sudo:a-docker-sshapi-1.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.hkg1.nsi.rackspace.com|sudo:a-docker-sshapi-1.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.iad3.nsi.rackspace.com|sudo:a-docker-sshapi-1.iad3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.lon3.nsi.rackspace.com|sudo:a-docker-sshapi-1.lon3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.ord1.nsi.rackspace.com|sudo:a-docker-sshapi-1.ord1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-1.syd2.nsi.rackspace.com|sudo:a-docker-sshapi-1.syd2.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.dfw1.nsi.rackspace.com|sudo:a-docker-sshapi-2.dfw1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.hkg1.nsi.rackspace.com|sudo:a-docker-sshapi-2.hkg1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.iad3.nsi.rackspace.com|sudo:a-docker-sshapi-2.iad3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.lon3.nsi.rackspace.com|sudo:a-docker-sshapi-2.lon3.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.ord1.nsi.rackspace.com|sudo:a-docker-sshapi-2.ord1.nsi.rackspace.com:/
          /sshx:a-docker-sshapi-2.syd2.nsi.rackspace.com|sudo:a-docker-sshapi-2.syd2.nsi.rackspace.com:/
          /sshx:a-docker-swarm-1.nglab.nsi.rackspace.com|sudo:a-docker-swarm-1.nglab.nsi.rackspace.com:/
          /sshx:a-docker-swarm-2.nglab.nsi.rackspace.com|sudo:a-docker-swarm-2.nglab.nsi.rackspace.com:/
          /sshx:a-docker-swarm-3.nglab.nsi.rackspace.com|sudo:a-docker-swarm-3.nglab.nsi.rackspace.com:/
          /sshx:a-docker-swarm-4.nglab.nsi.rackspace.com|sudo:a-docker-swarm-4.nglab.nsi.rackspace.com:/
          /sshx:a-docker-swarm-5.nglab.nsi.rackspace.com|sudo:a-docker-swarm-5.nglab.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.dfw1.nsi.rackspace.com|sudo:a-iso-mirror-1.dfw1.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.hkg1.nsi.rackspace.com|sudo:a-iso-mirror-1.hkg1.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.iad3.nsi.rackspace.com|sudo:a-iso-mirror-1.iad3.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.lon3.nsi.rackspace.com|sudo:a-iso-mirror-1.lon3.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.ord1.nsi.rackspace.com|sudo:a-iso-mirror-1.ord1.nsi.rackspace.com:/
          /sshx:a-iso-mirror-1.syd2.nsi.rackspace.com|sudo:a-iso-mirror-1.syd2.nsi.rackspace.com:/
          /sshx:a-jenkins-1.dfw3.nsi.rackspace.com|sudo:a-jenkins-1.dfw3.nsi.rackspace.com:/
          /sshx:a-jenkins-1.ord1.nsi.rackspace.com|sudo:a-jenkins-1.ord1.nsi.rackspace.com:/
          /sshx:a-nagios-1.dfw1.nsi.rackspace.com|sudo:a-nagios-1.dfw1.nsi.rackspace.com:/
          /sshx:a-nagios-1.iad3.nsi.rackspace.com|sudo:a-nagios-1.iad3.nsi.rackspace.com:/
          /sshx:a-nagios-1.lon3.nsi.rackspace.com|sudo:a-nagios-1.lon3.nsi.rackspace.com:/
          /sshx:a-redis-1.dfw1.nsi.rackspace.com|sudo:a-redis-1.dfw1.nsi.rackspace.com:/
          /sshx:a-redis-1.hkg1.nsi.rackspace.com|sudo:a-redis-1.hkg1.nsi.rackspace.com:/
          /sshx:a-redis-1.iad3.nsi.rackspace.com|sudo:a-redis-1.iad3.nsi.rackspace.com:/
          /sshx:a-redis-1.lon3.nsi.rackspace.com|sudo:a-redis-1.lon3.nsi.rackspace.com:/
          /sshx:a-redis-1.ord1.nsi.rackspace.com|sudo:a-redis-1.ord1.nsi.rackspace.com:/
          /sshx:a-redis-1.syd2.nsi.rackspace.com|sudo:a-redis-1.syd2.nsi.rackspace.com:/
          /sshx:a-redis-2.dfw1.nsi.rackspace.com|sudo:a-redis-2.dfw1.nsi.rackspace.com:/
          /sshx:a-redis-2.hkg1.nsi.rackspace.com|sudo:a-redis-2.hkg1.nsi.rackspace.com:/
          /sshx:a-redis-2.iad3.nsi.rackspace.com|sudo:a-redis-2.iad3.nsi.rackspace.com:/
          /sshx:a-redis-2.lon3.nsi.rackspace.com|sudo:a-redis-2.lon3.nsi.rackspace.com:/
          /sshx:a-redis-2.ord1.nsi.rackspace.com|sudo:a-redis-2.ord1.nsi.rackspace.com:/
          /sshx:a-redis-2.syd2.nsi.rackspace.com|sudo:a-redis-2.syd2.nsi.rackspace.com:/
          /sshx:a-salt-master-1.ord1.nsi.rackspace.com|sudo:a-salt-master-1.ord1.nsi.rackspace.com:/
          /sshx:a-salt-master-2.ord1.nsi.rackspace.com|sudo:a-salt-master-2.ord1.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.dfw1.nsi.rackspace.com|sudo:a-salt-syndic-1.dfw1.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.hkg1.nsi.rackspace.com|sudo:a-salt-syndic-1.hkg1.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.iad3.nsi.rackspace.com|sudo:a-salt-syndic-1.iad3.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.lon3.nsi.rackspace.com|sudo:a-salt-syndic-1.lon3.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.nglab.nsi.rackspace.com|sudo:a-salt-syndic-1.nglab.nsi.rackspace.com:/
          /sshx:a-salt-syndic-1.syd2.nsi.rackspace.com|sudo:a-salt-syndic-1.syd2.nsi.rackspace.com:/
          /sshx:a-scriptrunner-1.dfw3.nsi.rackspace.com|sudo:a-scriptrunner-1.dfw3.nsi.rackspace.com:/
          /sshx:a-scriptrunner-1.ord1.nsi.rackspace.com|sudo:a-scriptrunner-1.ord1.nsi.rackspace.com:/
          /sshx:a-scriptrunner-2.dfw3.nsi.rackspace.com|sudo:a-scriptrunner-2.dfw3.nsi.rackspace.com:/
          /sshx:a-scriptrunner-2.ord1.nsi.rackspace.com|sudo:a-scriptrunner-2.ord1.nsi.rackspace.com:/
          /sshx:a-syslog-1.dfw1.nsi.rackspace.com|sudo:a-syslog-1.dfw1.nsi.rackspace.com:/
          /sshx:a-syslog-1.hkg1.nsi.rackspace.com|sudo:a-syslog-1.hkg1.nsi.rackspace.com:/
          /sshx:a-syslog-1.iad3.nsi.rackspace.com|sudo:a-syslog-1.iad3.nsi.rackspace.com:/
          /sshx:a-syslog-1.lon3.nsi.rackspace.com|sudo:a-syslog-1.lon3.nsi.rackspace.com:/
          /sshx:a-syslog-1.ord1.nsi.rackspace.com|sudo:a-syslog-1.ord1.nsi.rackspace.com:/
          /sshx:a-syslog-1.syd2.nsi.rackspace.com|sudo:a-syslog-1.syd2.nsi.rackspace.com:/
          /sshx:a-syslog-2.dfw1.nsi.rackspace.com|sudo:a-syslog-2.dfw1.nsi.rackspace.com:/
          /sshx:a-syslog-2.hkg1.nsi.rackspace.com|sudo:a-syslog-2.hkg1.nsi.rackspace.com:/
          /sshx:a-syslog-2.iad3.nsi.rackspace.com|sudo:a-syslog-2.iad3.nsi.rackspace.com:/
          /sshx:a-syslog-2.lon3.nsi.rackspace.com|sudo:a-syslog-2.lon3.nsi.rackspace.com:/
          /sshx:a-syslog-2.ord1.nsi.rackspace.com|sudo:a-syslog-2.ord1.nsi.rackspace.com:/
          /sshx:a-syslog-2.syd2.nsi.rackspace.com|sudo:a-syslog-2.syd2.nsi.rackspace.com:/
          /sshx:a-websvcs-1.dfw1.nsi.rackspace.com|sudo:a-websvcs-1.dfw1.nsi.rackspace.com:/
          /sshx:a-websvcs-1.ord1.nsi.rackspace.com|sudo:a-websvcs-1.ord1.nsi.rackspace.com:/
          /sshx:a-websvcs-2.dfw1.nsi.rackspace.com|sudo:a-websvcs-2.dfw1.nsi.rackspace.com:/
          /sshx:a-websvcs-2.ord1.nsi.rackspace.com|sudo:a-websvcs-2.ord1.nsi.rackspace.com:/
          /sshx:a-websvcs-3.dfw1.nsi.rackspace.com|sudo:a-websvcs-3.dfw1.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.dfw3.nsi.rackspace.com|sudo:a-zabbix-proxy-1.dfw3.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.hkg1.nsi.rackspace.com|sudo:a-zabbix-proxy-1.hkg1.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.iad3.nsi.rackspace.com|sudo:a-zabbix-proxy-1.iad3.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.lon3.nsi.rackspace.com|sudo:a-zabbix-proxy-1.lon3.nsi.rackspace.com:/
          /sshx:rack@a-zabbix-proxy-1.nglab.nsi.rackspace.com|sudo:a-zabbix-proxy-1.nglab.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.ord1.nsi.rackspace.com|sudo:a-zabbix-proxy-1.ord1.nsi.rackspace.com:/
          /sshx:a-zabbix-proxy-1.syd2.nsi.rackspace.com|sudo:a-zabbix-proxy-1.syd2.nsi.rackspace.com:/
          /sshx:d-salt-master-1.iad3.nsi.rackspace.com|sudo:d-salt-master-1.iad3.nsi.rackspace.com:/
          /sshx:s-jenkins-uk-1.lon3.nsi.rackspace.com|sudo:s-jenkins-uk-1.lon3.nsi.rackspace.com:/
          )))
;; End of  List of hosts
#+END_SRC
** treemacs
*** package
Built in
*** code
#+BEGIN_SRC emacs-lisp
;;;; Treemacs

(setq +treemacs-git-mode 'extended)

#+END_SRC

** tree-sitter
*** Package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! tree-sitter)
(package! tree-sitter-langs)
#+END_SRC
*** Code
#+BEGIN_SRC emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC

** very large file
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! vlf                           :recipe (:host github
                                                 :repo "m00natic/vlfi"
                                                 :files ("*.el") ))
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; VLF

(use-package! vlf-setup
  :defer-incrementally  vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)

#+END_SRC

** wakatime
*** package
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! wakatime-mode)
#+END_SRC

*** code
#+BEGIN_SRC emacs-lisp
;;;;; Wakatime
(defun marty/startWakatime ()
  (interactive)
  (global-wakatime-mode)
  (setq wakatime-api-key (auth-source-pass-get 'secret "Application/wakatime/apikey")))

(use-package! wakatime-mode
  :ensure t
  :config
  (add-hook 'doom-first-buffer-hook  #'marty/startWakatime)
  (setq wakatime-cli-path "/usr/bin/wakatime"))
#+END_SRC

#+RESULTS:
: t

* CUSTOM

#+END_SRC
CUSTOM FILE

Keep this at the end of the file to allow for override of any settings that are
set before and customized in this file

#+BEGIN_SRC emacs-lisp
;;;; Custom

(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))


#+END_SRC
